
By convention, each package has two package names. In this text we
will refer to them as $PACKAGE_LC and $PACKAGE_UC.  The name
$PACKAGE_LC usually consists of lower case letters, digits, underlines
and hyphens. $PACKAGE_UC consists of uppercase letters, digits and
underlines, but bo hyphens.  Normally $PACKAGE_UC is the name
$PACKAGE_LC with letters converted to upper case and hyphens
coneverted to underlines.  Version numbers are not part of a package
name, so most package names don't contain digits.

Packages may be either libraray packages or binary packages.  Library
packages are in make/libs/*, while binary packages are in make/*.

Each package must define the following targets:


${PACKAGE_LC}-source
	Download source for the package

${PACKAGE_LC}-precompiled
	Compile package and prepare for firmware generation or ${PACKAGE_LC}-package

${PACKAGE_LC}-package
	Create a precompiled binary package

${PACKAGE_LC}-clean
${PACKAGE_LC}-dirclean
	Remove all files that can be recreated

${PACKAGE_LC}-list
	add package to the list of static or dynamic patches


To use the convenience macros, you need some more defines:
# PACKAGE_LC, PACKAGE_UC and VERSION
PACKAGE_LC:=package-name
PACKAGE_UC:=PACKAGE_NAME
$(PACKAGE_UC)_VERSION:=1.2.3

# initialize package macros, ether BINary or LIBrary.
$(PACKAGE_INIT_BIN) or $(PACKAGE_INIT_LIB)

# The download URL, split in directory part and filename
$(PACKAGE_UC)_SITE:=http://www.server.net/download
$(PACKAGE_UC)_SOURCE:=package-name-$($(PACKAGE_UC)_VERSION).tar.gz

# directory containing the makefiles. This value is the default from PACKAGE_INIT.
# It should not be necessary to override this value.
$(PACKAGE_UC)_MAKE_DIR:=$(MAKE_DIR)/$(PACKAGE_LC)

# directory for sourcefile, "$(SOURCE_DIR)/" and the directory created by extracting the tar-file
# This value is the default from PACKAGE_INIT.
$(PACKAGE_UC)_DIR:=$(SOURCE_DIR)/package-name-$($(PACKAGE_UC)_VERSION)

# target directory for the package. This value is the default from PACKAGE_INIT.
# It should not be necessary to override this value.
$(PACKAGE_UC)_TARGET_DIR:=$(PACKAGES_DIR)/$(PACKAGE_LC)-$($(PACKAGE_UC)_VERSION)

# order for inclusion in list of static or dynamic packages. Only for binary packages.
# only necessary if the  package contains a run-script
$(PACKAGE_UC)_STARTLEVEL=40


# Now you can use these macros:
# Download $($(PACKAGE_UC)_SITE)/$($(PACKAGE_UC)_SOURCE) to dl/$($(PACKAGE_UC)_SOURCE)
# defines $(PACKAGE_LC)-download
$(PACKAGE_SOURCE_DOWNLOAD)

# Unpack binary or library package von dl/$($(PACKAGE_UC)_SOURCE) and apply patches
$(PACKAGE_UNPACKED)

# configure package with ./configure with standard options
# common settings are read from config.mipsel, a common config.cache is enabled.
# for special needs, use these macros:
#  - $(PACKAGE_UC)_CONFIGURE_PRE_CMDS
#    commands to execute before ./configure
#    terminate each command with ';'
#    example: $(PACKAGE_UC)_CONFIGURE_PRE_CMDS += autoconf --force ;
#  - $(PACKAGE_UC)_CONFIGURE_ENV
#    environment assignments before ./configure
#    example: $(PACKAGE_UC)_CONFIGURE_ENV += ac_cv_special_value=yes
#  - $(PACKAGE_UC)_CONFIGURE_OPTIONS
#    options for ./configure
#    example: $(PACKAGE_UC)_CONFIGURE_OPTIONS += --with-foo --enable-bar
$(PACKAGE_CONFIGURED_CONFIGURE)

# Finalize package
# defines ${PACKAGE_LC}-list for binary packages
$(PACKAGE_FINI)
