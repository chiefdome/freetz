--- src/setup.h
+++ src/setup.h
@@ -125,6 +125,7 @@ extern int quit;
 extern gboolean print_last_revert;
 
 extern char *shell;
+extern char *shell_realpath;
 extern const char *mc_prompt;
 
 /* index to record_macro_buf[], -1 if not recording a macro */
--- src/setup.c
+++ src/setup.c
@@ -199,6 +199,7 @@ int quit = 0;
 
 /* The user's shell */
 char *shell = NULL;
+char *shell_realpath = NULL;
 
 /* The prompt */
 const char *mc_prompt = NULL;
--- src/main.c
+++ src/main.c
@@ -84,6 +84,7 @@
 /*** file scope type declarations ****************************************************************/
 
 /*** file scope variables ************************************************************************/
+char rp_shell[PATH_MAX];
 
 /*** file scope functions ************************************************************************/
 /* --------------------------------------------------------------------------------------------- */
@@ -128,19 +129,44 @@ OS_Setup (void)
     shell_env = getenv ("SHELL");
     if ((shell_env == NULL) || (shell_env[0] == '\0'))
     {
+        /* 2nd choice: user login shell */
         struct passwd *pwd;
         pwd = getpwuid (geteuid ());
         if (pwd != NULL)
             shell = g_strdup (pwd->pw_shell);
     }
     else
+        /* 1st choice: SHELL environment variable */
         shell = g_strdup (shell_env);
 
     if ((shell == NULL) || (shell[0] == '\0'))
     {
         g_free (shell);
-        shell = g_strdup ("/bin/sh");
+        /* 3rd choice: look for existing shells supported as MC subshells.  */
+        if (access("/bin/bash", X_OK) == 0)
+            shell = g_strdup ("/bin/bash");
+        else if (access("/bin/ash", X_OK) == 0)
+            shell = g_strdup ("/bin/ash");
+        else if (access("/bin/dash", X_OK) == 0)
+            shell = g_strdup ("/bin/dash");
+        else if (access("/bin/busybox", X_OK) == 0)
+            shell = g_strdup ("/bin/busybox");
+        else if (access("/bin/zsh", X_OK) == 0)
+            shell = g_strdup ("/bin/zsh");
+        else if (access("/bin/tcsh", X_OK) == 0)
+            shell = g_strdup ("/bin/tcsh");
+        /* No fish as fallback because it is so much different from other shells and
+         * in a way exotic (even though user-friendly by name) that we should not
+         * present it as a subshell without the user's explicit intention. We rather
+         * will not use a subshell but just a command line.
+         * else if (access("/bin/fish", X_OK) == 0)
+         *     shell = g_strdup ("/bin/fish");
+         */
+        else
+            /* Fallback and last resort: system default shell */
+            shell = g_strdup ("/bin/sh");
     }
+    shell_realpath = mc_realpath (shell, rp_shell);
 
     /* This is the directory, where MC was installed, on Unix this is DATADIR */
     /* and can be overriden by the MC_DATADIR environment variable */
--- src/subshell.c
+++ src/subshell.c
@@ -125,6 +125,8 @@ enum
 static enum
 {
     BASH,
+    ASH_BUSYBOX,    /* BusyBox default shell (ash) */
+    DASH,           /* Debian variant of ash */
     TCSH,
     ZSH,
     FISH
@@ -280,8 +282,9 @@ init_subshell_child (const char *pty_nam
             init_file = g_strdup (".bashrc");
         }
 
-        /* Make MC's special commands not show up in bash's history */
-        putenv ((char *) "HISTCONTROL=ignorespace");
+        /* Make MC's special commands not show up in bash's history and also suppress
+         * consecutive identical commands*/
+        putenv ((char *) "HISTCONTROL=ignoreboth");
 
         /* Allow alternative readline settings for MC */
         {
@@ -297,7 +300,26 @@ init_subshell_child (const char *pty_nam
 
         break;
 
-        /* TODO: Find a way to pass initfile to TCSH and ZSH */
+    case ASH_BUSYBOX:
+    case DASH:
+        /* Do we have a custom init file ~/.local/share/mc/ashrc? */
+        init_file = mc_config_get_full_path ("ashrc");
+
+        /* Otherwise use ~/.profile */
+        if (access (init_file, R_OK) == -1)
+        {
+            g_free (init_file);
+            init_file = g_strdup (".profile");
+        }
+
+        /* Put init file to ENV variable used by ash */
+        putenv_str = g_strconcat ("ENV=", init_file, NULL);
+        putenv (putenv_str);
+        /* Do not use "g_free (putenv_str)" here, otherwise ENV will be undefined! */
+
+        break;
+
+        /* TODO: Find a way to pass initfile to TCSH, ZSH and FISH */
     case TCSH:
     case ZSH:
     case FISH:
@@ -335,19 +357,17 @@ init_subshell_child (const char *pty_nam
         execl (shell, "bash", "-rcfile", init_file, (char *) NULL);
         break;
 
-    case TCSH:
-        execl (shell, "tcsh", (char *) NULL);
-        break;
-
     case ZSH:
         /* Use -g to exclude cmds beginning with space from history
          * and -Z to use the line editor on non-interactive term */
         execl (shell, "zsh", "-Z", "-g", (char *) NULL);
-
         break;
 
+    case ASH_BUSYBOX:
+    case DASH:
+    case TCSH:
     case FISH:
-        execl (shell, "fish", (char *) NULL);
+        execl (shell, shell, (char *) NULL);
         break;
     }
 
@@ -773,7 +793,8 @@ init_subshell (void)
 {
     /* This must be remembered across calls to init_subshell() */
     static char pty_name[BUF_SMALL];
-    char precmd[BUF_SMALL];
+    /* Must be considerably longer than BUF_SMALL (128) to support fancy shell prompts */
+    char precmd[300];
 
     switch (check_sid ())
     {
@@ -789,21 +810,36 @@ init_subshell (void)
     /* Take the current (hopefully pristine) tty mode and make */
     /* a raw mode based on it now, before we do anything else with it */
     init_raw_mode ();
-
     if (mc_global.tty.subshell_pty == 0)
     {                           /* First time through */
-        /* Find out what type of shell we have */
+        /* Find out what type of shell we have. Also consider real paths (resolved symlinks)
+         * because e.g. csh might point to tcsh, ash to dash or busybox, sh to anything. */
 
-        if (strstr (shell, "/zsh") || getenv ("ZSH_VERSION"))
+        if (strstr (shell, "/zsh") || strstr (shell_realpath, "/zsh") || getenv ("ZSH_VERSION"))
+            /* Also detects ksh symlinked to zsh */
             subshell_type = ZSH;
-        else if (strstr (shell, "/tcsh"))
-            subshell_type = TCSH;
-        else if (strstr (shell, "/csh"))
+        else if (strstr (shell, "/tcsh") || strstr (shell_realpath, "/tcsh"))
+            /* Also detects csh symlinked to tcsh */
             subshell_type = TCSH;
+        else if (strstr (shell, "/fish") || strstr (shell_realpath, "/fish"))
+            subshell_type = FISH;
+        else if (strstr (shell, "/dash") || strstr (shell_realpath, "/dash"))
+            /* Debian ash (also found if symlinked to by ash/sh) */
+            subshell_type = DASH;
+        else if (strstr (shell_realpath, "/busybox"))
+        {
+            /* If shell is symlinked to busybox, assume it is an ash, even though theoretically
+             * it could also be a hush (a mini shell for non-MMU systems deactivated by default).
+             * For simplicity's sake we assume that busybox always contains an ash, not a hush.
+             * On embedded platforms or on server systems, /bin/sh often points to busybox.
+             * Sometimes even bash is symlinked to busybox (CONFIG_FEATURE_BASH_IS_ASH option),
+             * so we need to check busybox symlinks *before* checking for the name "bash"
+             * in order to avoid that case. */
+            subshell_type = ASH_BUSYBOX;
+        }
         else if (strstr (shell, "/bash") || getenv ("BASH"))
+            /* If bash is not symlinked to busybox, it is safe to assume it is a real bash */
             subshell_type = BASH;
-        else if (strstr (shell, "/fish"))
-            subshell_type = FISH;
         else
         {
             mc_global.tty.use_subshell = FALSE;
@@ -854,7 +890,7 @@ init_subshell (void)
                 return;
             }
         }
-        else /* subshell_type is BASH or ZSH */ if (pipe (subshell_pipe))
+        else /* subshell_type is BASH, ASH_BUSYBOX, DASH or ZSH */ if (pipe (subshell_pipe))
         {
             perror (__FILE__ ": couldn't create pipe");
             mc_global.tty.use_subshell = FALSE;
@@ -882,29 +918,113 @@ init_subshell (void)
         init_subshell_child (pty_name);
     }
 
-    /* Set up `precmd' or equivalent for reading the subshell's CWD */
+    /* Set up `precmd' or equivalent for reading the subshell's CWD
+     *
+     * Attention! Never forget that these are *one-liners* even though the concatenated
+     * substrings contain line breaks and indentation for better understanding of the
+     * shell code. It is vital that each one-liner ends with a line feed character ("\n" ).
+     */
 
     switch (subshell_type)
     {
     case BASH:
         g_snprintf (precmd, sizeof (precmd),
-                    " PROMPT_COMMAND='pwd>&%d;kill -STOP $$'\n", subshell_pipe[WRITE]);
+            " PROMPT_COMMAND='pwd>&%d; kill -STOP $$'; "
+            "PS1='\\u@\\h:\\w\\$ '\n",
+            subshell_pipe[WRITE]);
+        break;
+
+    case ASH_BUSYBOX:
+        /* BusyBox ash needs a somewhat complicated precmd emulation via PS1, and it is vital
+         * that BB be built with active CONFIG_ASH_EXPAND_PRMT, but this is the default anyway.
+         *
+         * A: This leads to a stopped subshell (=frozen mc) if user calls "ash" command
+         *    "PS1='$(pwd>&%d; kill -STOP $$)\\u@\\h:\\w\\$ '\n",
+         *
+         * B: This leads to "sh: precmd: not found" in sub-subshell if user calls "ash" command
+         *    "precmd() { pwd>&%d; kill -STOP $$; }; "
+         *    "PS1='$(precmd)\\u@\\h:\\w\\$ '\n",
+         *
+         * C: This works if user calls "ash" command because in sub-subshell
+         *    PRECMD is unfedined, thus evaluated to empty string - no damage done.
+         *    Attention: BusyBox must be built with FEATURE_EDITING_FANCY_PROMPT to
+         *    permit \u, \w, \h, \$ escape sequences. Unfortunately this cannot be guaranteed,
+         *    especially on embedded systems where people try to save space, so let's use
+         *    the dash version below. It should work on virtually all systems.
+         *    "precmd() { pwd>&%d; kill -STOP $$; }; "
+         *    "PRECMD=precmd; "
+         *    "PS1='$(eval $PRECMD)\\u@\\h:\\w\\$ '\n",
+         */
+    case DASH:
+        /* Debian ash needs a precmd emulation via PS1, similar to BusyBox ash,
+         * but does not support escape sequences for user, host and cwd in prompt.
+         * Attention! Make sure that the buffer for precmd is big enough.
+         *
+         * We want to have a fancy dynamic prompt with user@host:cwd just like in the BusyBox
+         * examples above, but because replacing the home directory part of the path by "~" is
+         * complicated, it bloats the precmd to a size > BUF_SMALL (128).
+         *
+         * The following example is a little less fancy (home directory not replaced)
+         * and shows the basic workings of our prompt for easier understanding:
+         *
+         * "precmd() { "
+         *     "echo \"$USER@$(hostname -s):$PWD\"; "
+         *     "pwd>&%d; "
+         *     "kill -STOP $$; "
+         * "}; "
+         * "PRECMD=precmd; "
+         * "PS1='$($PRECMD)$ '\n",
+         */
+        g_snprintf (precmd, sizeof (precmd),
+            "precmd() { "
+                "if [ ! \"${PWD##$HOME}\" ]; then "
+                    "MC_PWD=\"~\"; "
+                "else "
+                    "[ \"${PWD##$HOME/}\" = \"$PWD\" ] && MC_PWD=\"$PWD\" || MC_PWD=\"~/${PWD##$HOME/}\"; "
+                "fi; "
+                "echo \"$USER@$(hostname -s):$MC_PWD\"; "
+                "pwd>&%d; "
+                "kill -STOP $$; "
+            "}; "
+            "PRECMD=precmd; "
+            "PS1='$($PRECMD)$ '\n",
+            subshell_pipe[WRITE]);
         break;
 
     case ZSH:
         g_snprintf (precmd, sizeof (precmd),
-                    " precmd(){ pwd>&%d;kill -STOP $$ }\n", subshell_pipe[WRITE]);
+            " precmd() { pwd>&%d; kill -STOP $$; }; "
+            "PS1='%%n@%%m:%%~%%# '\n",
+            subshell_pipe[WRITE]);
         break;
 
     case TCSH:
         g_snprintf (precmd, sizeof (precmd),
-                    "set echo_style=both;"
-                    "alias precmd 'echo $cwd:q >>%s;kill -STOP $$'\n", tcsh_fifo);
+            "set echo_style=both; "
+            "set prompt='%%n@%%m:%%~%%# '; "
+            "alias precmd 'echo $cwd:q >>%s; kill -STOP $$'\n",
+            tcsh_fifo);
         break;
+
     case FISH:
+        /* We also want a fancy user@host:cwd prompt here, but fish makes it very easy to also
+         * use colours, which is what we will do. But first here is a simpler, uncoloured version:
+         * "function fish_prompt; "
+         *     "echo (whoami)@(hostname -s):(pwd)\\$\\ ; "
+         *     "echo \"$PWD\">&%d; "
+         *     "kill -STOP %%self; "
+         * "end\n",
+         *
+         * TODO: fish prompt is shown when panel is hidden (Ctrl-O), but not when it is visible.
+         * Find out how to fix this.
+         */
         g_snprintf (precmd, sizeof (precmd),
-                    "function fish_prompt ; pwd>&%d;kill -STOP %%self; end\n",
-                    subshell_pipe[WRITE]);
+             "function fish_prompt; "
+                 "echo (whoami)@(hostname -s):(set_color $fish_color_cwd)(pwd)(set_color normal)\\$\\ ; "
+                 "echo \"$PWD\">&%d; "
+                 "kill -STOP %%self; "
+             "end\n",
+            subshell_pipe[WRITE]);
         break;
 
     }
@@ -1121,6 +1241,13 @@ subshell_name_quote (const char *s)
         quote_cmd_start = "(printf \"%b\" '";
         quote_cmd_end = "')";
     }
+    /* TODO: When BusyBox printf is fixed, get rid of this "else if", see
+       http://lists.busybox.net/pipermail/busybox/2012-March/077460.html */
+    /* else if (subshell_type == ASH_BUSYBOX)
+    {
+        quote_cmd_start = "\"`echo -en '";
+        quote_cmd_end = "'`\"";
+    } */
     else
     {
         quote_cmd_start = "\"`printf \"%b\" '";
