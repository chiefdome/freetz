#!/bin/sh
#

virthost_conf() {
#$1 virtual host (the string can have multiple entries separated by IFS - we loop) - if empty, we skip virthost config
#$2 configuration string to be enclosed in virtual host conditional (\n will be interpreted
#$3 optional: the character for the equality check (you can only provide a "=" or "!" here; default is "=")
if [ -n "$1" -a -f /usr/lib/mod_evhost.so -a "$LIGHTTPD_VIRTHOST" = "yes" ]; then
	eq=$3
	if [ -z "$eq" ]; then eq="="; fi
	old_IFS=$IFS
	IFS=" 	"
	for i in $1; do
		regexp="~"
		if [ -z "$(echo $i | sed 's/[A-Za-z0-9\.]//g')" ]; then regexp="="; fi
		echo "\$HTTP[\"host\"] $eq$regexp \"$i\" {"
		echo -e "$2"
		echo "}"
	done
	IFS=$old_IFS
else
	echo -e "$2"
fi
}

cat << EOF
server.modules = ( "mod_access" )
index-file.names            = ( "index.cgi", "index.html",
                                "index.htm", "default.htm",
				"index.php", "index.rb" )
mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jar"          =>      "application/x-java-archive",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".log"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar",
  ""              =>      "application/octet-stream",
 )
url.access-deny = ( "~", ".inc" )
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi", ".rb", ".cgi" )
server.port = $LIGHTTPD_PORT
server.pid-file = "/var/run/lighttpd.pid"
server.username = "wwwrun"
#server.groupname = "wwwrun"
EOF

out="connection.kbytes-per-second = $LIGHTTPD_LIMITCONN\nserver.kbytes-per-second = $LIGHTTPD_LIMITSRV"
virthost_conf "$LIGHTTPD_LIMITVIRT" "$out"

if [ "$LIGHTTPD_CHROOT" = "yes" ];then
cat << EOF
server.chroot = "/"
EOF
fi

if [ -f /usr/lib/mod_dirlisting.so ]; then
out="dir-listing.activate = \"$LIGHTTPD_DIRLISTING\"\ndir-listing.encoding = \"$LIGHTTPD_DIRLISTINGENC\""
virthost_conf "$LIGHTTPD_DIRLISTINGVIRT" "$out"
fi

enable_ssl() {
cat << EOF
ssl.engine = "$LIGHTTPD_SSLENABLE"
ssl.pemfile = "/tmp/flash/lighttpd_crt.pem"
ssl.use-sslv2 = "disable"
EOF
if [ -r "/tmp/flash/lighttpd_ca.pem" ]; then
	if grep -q "BEGIN CERTIFICATE" /tmp/flash/lighttpd_ca.pem; then
cat << EOF
ssl.ca-file = "/tmp/flash/lighttpd_ca.pem"
EOF
	fi
fi
}

if /usr/bin/lighttpd -V | grep -q "+ SSL Support"; then
if [ "$LIGHTTPD_SSLENABLE" = "enable" ]; then
	virtsrv=$(echo $LIGHTTPD_SSLVIRT | sed 's/ /|/g')
	if [ "$LIGHTTPD_SSLADDITIONAL" = "yes" ]; then
		echo "\$SERVER[\"socket\"] == \":$LIGHTTPD_SSLPORT\" {"
		enable_ssl
		[ -n "$virtsrv" ] && virthost_conf "$virtsrv" "url.access-deny = ( \"\" )" "!"
		echo "}"
		out=""
		[ -n "$virtsrv" ] && out="url.access-deny = ( \"\" )"
		if [ -f /usr/lib/mod_redirect.so -a "$LIGHTTPD_SSLREDIRECT" = "yes" ]; then
			echo "server.modules += ( \"mod_redirect\" )"
			virtsrv="($virtsrv)"
			out="url.redirect = ( \"^/(.*)\" => \"https://%1/\$1\" )"
		fi
		if [ -n "$out" ]; then
			echo "\$SERVER[\"socket\"] == \":$LIGHTTPD_PORT\" {"
			virthost_conf "$virtsrv" "$out"
			echo "}"
		fi
	else
		enable_ssl
	fi
fi
fi

if [ "$LIGHTTPD_LOGGING" = "yes" ]; then
	if [ "$LIGHTTPD_LOGGING_ERROR_FILE" = "yes" ]; then
cat << EOF
server.errorlog = "$LIGHTTPD_LOGGING_ERROR"
EOF
	else
cat << EOF
server.errorlog-use-syslog = "enable"
EOF
	fi
	if [ -f /usr/lib/mod_accesslog.so ]; then
cat << EOF
server.modules += ( "mod_accesslog" )
EOF
		if [ "$LIGHTTPD_LOGGING_ACCESS_FILE" = "yes" ]; then
cat << EOF
accesslog.filename = "$LIGHTTPD_LOGGING_ACCESS"
EOF
		else
cat << EOF
accesslog.use-syslog = "enable"
EOF
		fi
	fi
fi

if [ -f /usr/lib/mod_cgi.so -a "$LIGHTTPD_MODCGI" = "yes" ]; then
cat << EOF
server.modules += ( "mod_cgi" )
EOF
	out="cgi.assign = ( \".cgi\" => \"\", \"/cgi-bin/\" => \"\" )"
	virthost_conf "$LIGHTTPD_MODCGIVIRT" "$out"
fi

if [ -f /usr/lib/mod_compress.so -a "$LIGHTTPD_MODCOMPRESS" = "yes" ]; then
cat << EOF
server.modules += ( "mod_compress" )
EOF
	out="compress.cache-dir = \"$LIGHTTPD_MODCOMPRESSDIR\"\ncompress.filetype  = (\"text/plain\", \"text/html\")"
	virthost_conf "$LIGHTTPD_MODCOMPRESSVIRT" "$out"
fi

if [ "$LIGHTTPD_ERROR" = "yes" ]; then
	out="server.errorfile-prefix = \"$LIGHTTPD_ERRORFILE\""
	virthost_conf "$LIGHTTPD_ERRORVIRT" "$out"
fi

if [ -f /usr/lib/mod_auth.so -a "$LIGHTTPD_AUTH" = "yes" ]; then
cat << EOF
server.modules += ( "mod_auth" )
auth.backend = "htdigest"
auth.backend.htdigest.userfile = "/tmp/flash/lighttpd-htdigest.user"
EOF
#just a return
IFS="
"
authrequire=$(cat /tmp/flash/lighttpd-rights.user)
virthost_auth=""
out="auth.require = ( "
for i in $authrequire; do
	if [ "$(echo $i | cut -c1)" = "[" ]; then
		if [ -n "$out" ]; then
			out="$out )"
			virthost_conf "$virthost_auth" "$out"
		fi
		out="auth.require = ( "
		virthost_auth=$(echo $i | sed 's/^\[//' | sed 's/\]$//')
		continue
	fi
	dir=$(echo $i | cut -d\" -f 2)
	user=$(echo $i | cut -d\" -f 4)
	out="$out \"$dir\" => ( \"method\" => \"$LIGHTTPD_AUTHMETH\", \"realm\" => \"lighttpd\", \"require\" => \"$user\" ),"
done 
out="$out )"
virthost_conf "$virthost_auth" "$out"
fi

if [ -f /usr/lib/mod_status.so ]; then
	if [ "$LIGHTTPD_MODSTATUS" = "yes" ]; then
cat << EOF
server.modules += ( "mod_status" )
status.enable-sort = "$LIGHTTPD_MODSTATUSSORT"
EOF
	out=""
		if [ -n "$LIGHTTPD_MODSTATUSCONFIG" ]; then
			out="status.config-url = \"$LIGHTTPD_MODSTATUSCONFIG\"\n"
		fi
		if [ -n "$LIGHTTPD_MODSTATUSSTATISTIC" ]; then
			out="$out status.statistics-url = \"$LIGHTTPD_MODSTATUSSTATISTIC\"\n"
		fi
		if [ -n "$LIGHTTPD_MODSTATUSSTATUS" ]; then
			out="$out status.status-url = \"$LIGHTTPD_MODSTATUSSTATUS\""
		fi
	fi
	virthost_conf "$LIGHTTPD_MODSTATUSVIRT" "$out"
fi

if [ "$LIGHTTPD_MODFASTCGIPHP" = "yes" -a -f /usr/lib/mod_fastcgi.so ]; then
cat << EOF
server.modules += ( "mod_fastcgi" )
EOF
out="fastcgi.server = ( \".php\" => (( \"socket\" => \"/var/run/lighttpd/php-fastcgi.socket\", \"bin-path\" => \"$LIGHTTPD_MODFASTCGIPHPPATH\", \"max-procs\" => $LIGHTTPD_MODFASTCGIPHPMAXPROC )) )"
virthost_conf "$LIGHTTPD_MODFASTCGIPHPVIRT" "$out"
fi
if [ "$LIGHTTPD_MODFASTCGIRUBY" = "yes" -a -f /usr/lib/mod_fastcgi.so ]; then
cat << EOF
server.modules += ( "mod_fastcgi" )
EOF
out="fastcgi.server = ( \".rb\" => (( \"socket\" => \"/var/run/lighttpd/ruby-fastcgi.socket\", \"bin-path\" => \"$LIGHTTPD_MODFASTCGIRUBYPATH\", \"max-procs\" => $LIGHTTPD_MODFASTCGIRUBYMAXPROC )) )"
virthost_conf "$LIGHTTPD_MODFASTCGIRUBYVIRT" "$out"
fi

if [ -f /usr/lib/mod_evhost.so -a "$LIGHTTPD_VIRTHOST" = "yes" ]; then
cat << EOF
server.modules += ( "mod_evhost" )
evhost.path-pattern = "$LIGHTTPD_DOCROOT/$LIGHTTPD_VIRTHOSTTYPE/"
server.document-root = "$LIGHTTPD_DOCROOT/default/"
EOF
else
cat << EOF
server.document-root = "$LIGHTTPD_DOCROOT"
EOF
fi

if [ -f /tmp/flash/lighttpd_add ]; then
	cat /tmp/flash/lighttpd_add
fi

