Diff between 3370 05.08 and 6840 05.09 sources

diff -Naur linux-2.6.28/drivers/net/avalanche_cpgmac_f/cpgmac_f_NetLxTxRx.c 6840_09/GPL/GPL-release_kernel/linux-2.6.28/drivers/net/avalanche_cpgmac_f/cpgmac_f_NetLxTxRx.c
--- linux-2.6.28/drivers/net/avalanche_cpgmac_f/cpgmac_f_NetLxTxRx.c	2011-01-17 12:11:38.000000000 +0100
+++ linux-2.6.28/drivers/net/avalanche_cpgmac_f/cpgmac_f_NetLxTxRx.c	2011-10-10 11:49:07.000000000 +0200
@@ -139,6 +139,8 @@
 #include "../avm_cpmac/cpmac_puma_if.h"
 #endif /*--- #if defined(CONFIG_AVM_CPMAC) && CONFIG_AVM_CPMAC ---*/
 
+#define CPMAC_DDA_CACHE_INVALIDATE_FIX
+
 #if defined (CONFIG_ARM_AVALANCHE_STATIC_SKB)
 struct sk_buff *ti_alloc_skb(unsigned int size, int gfp_mask);
 #endif
@@ -231,6 +233,10 @@
 
 #endif /* NEW_NAPI */
 
+
+/* DDA_cpmac_net_alloc_rx_buf is used only for initialization and adding of
+ * TxBD (which we have not seen done yet) */
+
 /* Allocate RX buffer */
 Ptr DDA_cpmac_net_alloc_rx_buf(CpmacNetDevice * hDDA, Int bufSize,
                                DDC_NetDataToken * dataToken,
@@ -255,10 +261,15 @@
         /* Set the data token */
         *dataToken = (DDC_NetDataToken) p_skb;
 
-#ifdef CPMAC_DDA_CACHE_INVALIDATE_FIX
+#       if defined(CPMAC_DDA_CACHE_INVALIDATE_FIX)
         /* Invalidate buffer */
-        CPMAC_DDA_CACHE_INVALIDATE((unsigned long) ret_ptr, bufSize);
-#endif
+#       if defined(CONFIG_DEBUG_SLAB)
+        CPMAC_DDA_CACHE_WRITEBACK((unsigned long) p_skb->head, hDDA->rxBufSize + NET_SKB_PAD);
+        CPMAC_DDA_CACHE_INVALIDATE((unsigned long) p_skb->head, hDDA->rxBufSize + NET_SKB_PAD);
+#       else /*--- #if defined(CONFIG_DEBUG_SLAB) ---*/
+        CPMAC_DDA_CACHE_INVALIDATE((unsigned long) p_skb->head, hDDA->rxBufSize + NET_SKB_PAD);
+#       endif /*--- #else ---*/ /*--- #if defined(CONFIG_DEBUG_SLAB) ---*/
+#       endif /*--- #if defined(CPMAC_DDA_CACHE_INVALIDATE_FIX) ---*/
     } else {
 #ifdef CPMAC_DDA_DEBUG          /* We dont want the error printf to appear on screen as it clogs the serial port */
         /* errPrint("Failed to allocate skb for %s.\n", p_dev->name); */
@@ -295,6 +306,15 @@
         /* TODO For finding a problem with the tx tasklet */
         /*--- p_skb->tail = NULL; ---*/
         /*--- p_skb->end = NULL; ---*/
+#       if defined(CPMAC_DDA_CACHE_INVALIDATE_FIX)
+        /* Invalidate buffer */
+#       if defined(CONFIG_DEBUG_SLAB)
+        CPMAC_DDA_CACHE_WRITEBACK((unsigned long) p_skb->head, hDDA->rxBufSize + NET_SKB_PAD);
+        CPMAC_DDA_CACHE_INVALIDATE((unsigned long) p_skb->head, hDDA->rxBufSize + NET_SKB_PAD);
+#       else /*--- #if defined(CONFIG_DEBUG_SLAB) ---*/
+        CPMAC_DDA_CACHE_INVALIDATE((unsigned long) p_skb->head, hDDA->rxBufSize + NET_SKB_PAD);
+#       endif /*--- #else ---*/ /*--- #if defined(CONFIG_DEBUG_SLAB) ---*/
+#       endif /*--- #if defined(CPMAC_DDA_CACHE_INVALIDATE_FIX) ---*/
     } else {
         return (NULL);
     }
@@ -370,10 +390,11 @@
     skb_put(p_skb, pkt->pktLength);
     /*--- printk("[%s] %u %:40B ... \n", __FUNCTION__, p_skb->len, p_skb->data); ---*/
 
-#ifndef CPMAC_DDA_CACHE_INVALIDATE_FIX
+/*--- #   if !defined(CPMAC_DDA_CACHE_INVALIDATE_FIX) ---*/
     /* Invalidate cache */
     CPMAC_DDA_CACHE_INVALIDATE(p_skb->data, pkt->pktLength);
-#endif
+/*--- #   endif ---*/ /*--- #if !defined(CPMAC_DDA_CACHE_INVALIDATE_FIX) ---*/
+
     avm_simple_profiling_skb(0 /* not used */,  pkt->pktLength, p_skb);
 #ifdef CONFIG_TI_PACKET_PROCESSOR
     epi = (struct EPI *)pkt->bufList[0].bufToken;
diff -Naur linux-2.6.28/drivers/usb/core/driver.c linux-2.6.28/drivers/usb/core/driver.c
--- linux-2.6.28/drivers/usb/core/driver.c	2009-10-13 12:25:03.000000000 +0200
+++ linux-2.6.28/drivers/usb/core/driver.c	2011-10-18 15:17:13.000000000 +0200
@@ -208,6 +208,13 @@
 		return -ENODEV;
 	}
 
+#if 1 /* == 20111018 AVM/WK Extension == */
+	if (udev->noprobe) {
+		dev_err(&intf->dev, "Probing is disabled for this device\n");
+		return -ENODEV;
+	}
+#endif
+
 	id = usb_match_id(intf, driver->id_table);
 	if (!id)
 		id = usb_match_dynamic_id(intf, driver);
diff -Naur linux-2.6.28/drivers/usb/core/generic.c linux-2.6.28/drivers/usb/core/generic.c
--- linux-2.6.28/drivers/usb/core/generic.c	2011-03-31 14:27:43.000000000 +0200
+++ linux-2.6.28/drivers/usb/core/generic.c	2011-10-18 15:17:13.000000000 +0200
@@ -202,6 +202,10 @@
 	 */
 	if (udev->authorized == 0)
 		dev_err(&udev->dev, "Device is not authorized for usage\n");
+#if 1 /* == 20111018 AVM/WK Extension  == */
+	else if (udev->noprobe)
+		dev_err(&udev->dev, "Probing is disabled for this device\n");
+#endif
 	else {
 		c = usb_choose_configuration(udev);
 		if (c >= 0) {
diff -Naur linux-2.6.28/drivers/usb/core/sysfs.c linux-2.6.28/drivers/usb/core/sysfs.c
--- linux-2.6.28/drivers/usb/core/sysfs.c	2009-12-14 15:57:12.000000000 +0100
+++ linux-2.6.28/drivers/usb/core/sysfs.c	2011-10-18 15:17:13.000000000 +0200
@@ -509,6 +509,69 @@
 	    usb_dev_authorized_show, usb_dev_authorized_store);
 
 
+#if 1 /* == 20111018 AVM/WK Extension: prevent probing for a device */
+
+/* show if probing is allowed (0) or not allowed (1) for the device */
+static ssize_t usb_dev_noprobe_show(struct device *dev,
+				       struct device_attribute *attr,
+				       char *buf)
+{
+	struct usb_device *usb_dev = to_usb_device(dev);
+	return snprintf(buf, PAGE_SIZE, "%u\n", usb_dev->noprobe);
+}
+
+/*
+ * Prevent probing for a device
+ * (configures or deconfigures the device as a side effect)
+ *
+ * Writing a 0 allows probing and reconfigures the device
+ * writing a 1 prevents probing and unconfigures the device it
+ * 
+ */
+static ssize_t usb_dev_noprobe_store(struct device *dev,
+					struct device_attribute *attr,
+					const char *buf, size_t size)
+{
+	ssize_t result;
+	struct usb_device *usb_dev = to_usb_device(dev);
+	unsigned val;
+	result = sscanf(buf, "%u\n", &val);
+	if (result != 1)
+		result = -EINVAL;
+	else {
+		usb_lock_device(usb_dev);
+		if (val == 0) {
+			int c,err;
+			usb_dev->noprobe = 0;
+			c = usb_choose_configuration(usb_dev);
+			if (c >= 0) {
+				err = usb_set_configuration(usb_dev, c);
+				if (err) {
+					dev_err(&usb_dev->dev,
+						"can't set config #%d, error %d\n", c, err);
+					/* This need not be fatal.  The user can try to
+					 * set other configurations. */
+				}
+			}
+		} else {
+			if (val == 2) {
+				usb_dev->noprobe = 1;
+				usb_set_configuration(usb_dev, -1);
+				usb_reset_device(usb_dev);
+			} else {
+				usb_dev->noprobe = 1;
+				usb_set_configuration(usb_dev, -1);
+			}
+		}
+		usb_unlock_device(usb_dev);
+	}
+	return result < 0? result : size;
+}
+
+static DEVICE_ATTR(noprobe, 0644,
+	    usb_dev_noprobe_show, usb_dev_noprobe_store);
+#endif
+
 static struct attribute *dev_attrs[] = {
 	/* current configuration's attributes */
 	&dev_attr_configuration.attr,
@@ -533,6 +596,11 @@
 	&dev_attr_maxchild.attr,
 	&dev_attr_quirks.attr,
 	&dev_attr_authorized.attr,
+#if 1 /* AVM/WK Extension */
+	&dev_attr_noprobe.attr,
+
+#endif
+
 	NULL,
 };
 static struct attribute_group dev_attr_grp = {
diff -Naur linux-2.6.28/include/linux/avm_pa_hw.h linux-2.6.28/include/linux/avm_pa_hw.h
--- linux-2.6.28/include/linux/avm_pa_hw.h	2011-09-09 16:17:16.000000000 +0200
+++ linux-2.6.28/include/linux/avm_pa_hw.h	2011-10-13 17:51:56.000000000 +0200
@@ -126,8 +126,8 @@
 
 struct avm_hardware_pa {
     unsigned long features;
-    int (*add_session)(avm_session_handle session_id,
-                       struct avm_pa_session *avm_session);
+    int (*add_session)(struct avm_pa_session *avm_session);
+    int (*change_session)(struct avm_pa_session *avm_session);
     int (*remove_session)(avm_session_handle session_id);
 };
 
diff -Naur linux-2.6.28/include/linux/usb.h linux-2.6.28/include/linux/usb.h
--- linux-2.6.28/include/linux/usb.h	2008-12-30 05:06:20.000000000 +0100
+++ linux-2.6.28/include/linux/usb.h	2011-10-18 15:17:13.000000000 +0200
@@ -450,6 +450,11 @@
 	unsigned authorized:1;
  	unsigned authenticated:1;
 	unsigned wusb:1;
+
+#if 1 /* == 20111018 AVM/WK  Extension: Reserve a device for usermode access == */
+	unsigned noprobe:1;
+#endif
+
 	int string_langid;
 
 	/* static strings from the device */
diff -Naur linux-2.6.28/net/avm_pa/avm_pa.c linux-2.6.28/net/avm_pa/avm_pa.c
--- linux-2.6.28/net/avm_pa/avm_pa.c	2011-09-15 18:40:49.000000000 +0200
+++ linux-2.6.28/net/avm_pa/avm_pa.c	2011-10-13 17:51:56.000000000 +0200
@@ -85,6 +85,7 @@
 
 #define AVM_PA_CRCCHECK           0
 #define AVM_PA_TRACE              0  /* 0: off */
+#define AVM_PA_TOKSTATS           0
 
 /* ------------------------------------------------------------------------ */
 
@@ -273,8 +274,10 @@
 #define AVM_PA_CPUTIME_EST_DEFAULT_IDX        2 /* 0 - 5 => 0.25sec - 8sec */
 #define AVM_PA_CPUTIME_EST_DEFAULT_EWMA_LOG   1 /* 1 - 31 */
 
-#define AVM_PA_CPUTIME_MSWIN_LOW            750 /* ms/s */
-#define AVM_PA_CPUTIME_MSWIN_HIGH           850 /* ms/s */
+#define AVM_PA_CPUTIME_IRQ_MSWIN_LOW            750 /* ms/s */
+#define AVM_PA_CPUTIME_IRQ_MSWIN_HIGH           850 /* ms/s */
+#define AVM_PA_CPUTIME_IDLE_MSWIN_LOW           10  /* ms/s */
+#define AVM_PA_CPUTIME_IDLE_MSWIN_HIGH          50  /* ms/s */
 
 /* ------------------------------------------------------------------------ */
 
@@ -362,10 +365,17 @@
    struct avm_pa_cputime_est cputime_irq_est;
    /* tbf for packets per second */
    int                       load_control;
-   int                       tbf_enabled;
+#define LOADCONTROL_OFF       0x00
+#define LOADCONTROL_POWER     0x01
+#define LOADCONTROL_IRQ       0x02
+#define LOADCONTROL_POWERIRQ  (LOADCONTROL_POWER|LOADCONTROL_IRQ)
+#define LOADCONTROL_IDLE      0x04
    int                       load_reduce;
-   unsigned                  mswin_low;       /* max irq ms/s */
-   unsigned                  mswin_high;  /* overload irq ms/s */
+   int                       tbf_enabled;
+   unsigned                  irq_mswin_low;   /* max irq ms/s */
+   unsigned                  irq_mswin_high;  /* overload irq ms/s */
+   unsigned                  idle_mswin_low;   /* overload idle ms/s */
+   unsigned                  idle_mswin_high;  /* good idle ms/s */
    unsigned                  maxrate;     /* pkt/s at load_reduce == 0 */
    unsigned                  rate;        /* pkt/s */
    unsigned                  pktbuffer;   /* # pkts */
@@ -402,10 +412,11 @@
    .udp_timeout_secs = 10,
    .echo_timeout_secs = 3,
 
-   .load_control = 1,
-   .load_reduce = 0,
-   .mswin_low = AVM_PA_CPUTIME_MSWIN_LOW,
-   .mswin_high = AVM_PA_CPUTIME_MSWIN_HIGH,
+   .load_control = LOADCONTROL_IDLE,
+   .irq_mswin_low = AVM_PA_CPUTIME_IRQ_MSWIN_LOW,
+   .irq_mswin_high = AVM_PA_CPUTIME_IRQ_MSWIN_HIGH,
+   .idle_mswin_low = AVM_PA_CPUTIME_IDLE_MSWIN_LOW,
+   .idle_mswin_high = AVM_PA_CPUTIME_IDLE_MSWIN_HIGH,
    .maxrate = AVM_PA_DEFAULT_MAXRATE,
    .rate = AVM_PA_DEFAULT_MAXRATE,
    .pktbuffer = AVM_PA_DEFAULT_PKTBUFFER,
@@ -3054,7 +3065,7 @@
       }
 #endif
       if (!ctx->hw_ppa_disabled && ctx->hardware_pa.add_session) {
-         if ((*ctx->hardware_pa.add_session)(session->session_handle, session) == AVM_PA_TX_SESSION_ADDED)
+         if ((*ctx->hardware_pa.add_session)(session) == AVM_PA_TX_SESSION_ADDED)
             session->in_hw = 1;
       }
       pa_session_add(session);
@@ -3091,11 +3102,20 @@
       if (match.encap_offset == AVM_PA_OFFSET_NOT_SET)
          egress->push_l2_len = match.ip_offset;
       else egress->push_l2_len = match.encap_offset;
+      if (session->in_hw) {
+         if (ctx->hardware_pa.change_session) {
+            if ((*ctx->hardware_pa.change_session)(session) != AVM_PA_TX_EGRESS_ADDED)
+               session->in_hw = 0;
+         } else {
+            (*ctx->hardware_pa.remove_session)(session->session_handle);
+            session->in_hw = 0;
+         }
+      }
+      ctx->stats.tx_egress_ok++;
       if (ctx->dbgsession) {
          pa_printk(KERN_DEBUG, "\navm_pa: new egress:\n");
          pa_show_session(session, pa_printk, KERN_DEBUG);
       }
-      ctx->stats.tx_egress_ok++;
       return AVM_PA_TX_EGRESS_ADDED;
    }
    ctx->stats.tx_egress_error++;
@@ -3402,6 +3422,51 @@
    }
 }
 
+static void pa_show_status(pa_fprintf fprintffunc, void *arg)
+
+{
+   struct avm_pa_global *ctx = &pa_glob;
+   char *mode;
+
+   if (ctx->disabled) mode = "disabled";
+   else if (ctx->fw_disabled) mode = "testmode";
+   else mode = "enabled";
+
+   (*fprintffunc)(arg, "State          : %s\n", mode);
+   if (ctx->hardware_pa.add_session) {
+      mode = ctx->hw_ppa_disabled ? "disabled" : "enable";
+      (*fprintffunc)(arg, "HW State       : %s\n", mode);
+   }
+   switch (ctx->load_control) {
+      case LOADCONTROL_IDLE: mode = "idle"; break;
+      case LOADCONTROL_POWER:   mode = "power"; break;
+      case LOADCONTROL_IRQ:      mode = "irq"; break;
+      case LOADCONTROL_POWERIRQ: mode = "powerirq"; break;
+      default: mode = "????"; break;
+   }
+   (*fprintffunc)(arg, "Loadcontrol    : %s\n", mode);
+   mode = ctx->tbf_enabled ? "enabled" : "disabled";
+   if (ctx->load_control & LOADCONTROL_IRQ) {
+      (*fprintffunc)(arg, "IRQ mswin      : %u %u\n",
+                          ctx->irq_mswin_low, ctx->irq_mswin_high);
+   }
+   if (ctx->load_control & LOADCONTROL_IDLE) {
+      (*fprintffunc)(arg, "IDLE mswin     : %u %u\n",
+                          ctx->idle_mswin_low, ctx->idle_mswin_high);
+   }
+   (*fprintffunc)(arg, "Maxrate        : %u\n", ctx->maxrate);
+   (*fprintffunc)(arg, "TBF            : %s\n", mode);
+   (*fprintffunc)(arg, "Limit Rate     : %u\n", ctx->rate);
+   (*fprintffunc)(arg, "Current Rate   : %lu\n", 
+                       (unsigned long)ctx->stats.fw_pps);
+   (*fprintffunc)(arg, "user msecs/sec : %lu\n",
+                       (unsigned long)ctx->stats.userms);
+   (*fprintffunc)(arg, "idle msecs/sec : %lu\n",
+                       (unsigned long)ctx->stats.idlems);
+   (*fprintffunc)(arg, "irq msecs/sec  : %lu\n",
+                       (unsigned long)ctx->stats.irqms);
+}
+
 static void pa_show_vpids(pa_fprintf fprintffunc, void *arg)
 
 {
@@ -3695,6 +3760,7 @@
 /* -------- value log ----------------------------------------------------- */
 /* ------------------------------------------------------------------------ */
 
+#if AVM_PA_TOKSTATS
 static int avm_pa_thread(void *reply_data)
 {
    struct avm_pa_global *ctx = &pa_glob;
@@ -3732,6 +3798,7 @@
    }
    return 0;
 }
+#endif
 
 /* ------------------------------------------------------------------------ */
 
@@ -3756,39 +3823,71 @@
 
    ctx->lc_overlimit = ctx->stats.rx_overlimit;
 
-   if (ctx->load_control == 0)
-      return;
-
-   if (   ctx->stats.irqms > ctx->mswin_high
-       && ctx->stats.fw_pps > AVM_PA_MINRATE) {
-      unsigned percent = 1;
-      if (ctx->tbf_enabled == 0) {
-         ctx->rate = ctx->maxrate;
-         percent = 4;
+   if (ctx->load_control & LOADCONTROL_IRQ) {
+      if (   ctx->stats.irqms >= ctx->irq_mswin_high
+          && ctx->stats.fw_pps > AVM_PA_MINRATE) {
+         unsigned percent = 1;
+         if (ctx->tbf_enabled == 0) {
+            ctx->rate = ctx->maxrate;
+            percent = 4;
+         }
+         rate = ctx->rate;
+         rate = rate - (rate*percent)/100;
+         ctx->rate = rate;
+         avm_pa_tbf_update(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
+         ctx->tbf_enabled = 1;
+         printk(KERN_INFO "avm_pa: load reduce 0, rate %u down (pps %lu ov_pps %lu irqms %lu)\n",
+                        ctx->rate,
+                        (unsigned long)ctx->stats.fw_pps,
+                        (unsigned long)ctx->stats.overlimit_pps,
+                        (unsigned long)ctx->stats.irqms);
+      } else if (   overlimit
+                 && ctx->load_reduce == 0
+                 && ctx->stats.irqms < ctx->irq_mswin_low) {
+         unsigned rate = ctx->rate;
+         unsigned percent = 1;
+         rate = rate + (rate*percent)/100;
+         ctx->rate = rate;
+         avm_pa_tbf_update(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
+         printk(KERN_INFO "avm_pa: load reduce 0, rate %u up (pps %lu ov_pps %lu irqms %lu)\n",
+                        ctx->rate,
+                        (unsigned long)ctx->stats.fw_pps,
+                        (unsigned long)ctx->stats.overlimit_pps,
+                        (unsigned long)ctx->stats.irqms);
+      }
+   }
+   if (ctx->load_control & LOADCONTROL_IDLE) {
+      if (   ctx->stats.idlems <= ctx->idle_mswin_low
+          && ctx->stats.fw_pps > AVM_PA_MINRATE) {
+         unsigned percent = 1;
+         if (ctx->tbf_enabled == 0) {
+            ctx->rate = ctx->maxrate;
+            percent = 4;
+         }
+         rate = ctx->rate;
+         rate = rate - (rate*percent)/100;
+         ctx->rate = rate;
+         avm_pa_tbf_update(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
+         ctx->tbf_enabled = 1;
+         printk(KERN_INFO "avm_pa: rate %u down (pps %lu ov_pps %lu idlems %lu)\n",
+                        ctx->rate,
+                        (unsigned long)ctx->stats.fw_pps,
+                        (unsigned long)ctx->stats.overlimit_pps,
+                        (unsigned long)ctx->stats.idlems);
+      } else if (   overlimit
+                 && ctx->load_reduce == 0
+                 && ctx->stats.idlems > ctx->idle_mswin_high) {
+         unsigned rate = ctx->rate;
+         unsigned percent = 1;
+         rate = rate + (rate*percent)/100;
+         ctx->rate = rate;
+         avm_pa_tbf_update(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
+         printk(KERN_INFO "avm_pa: rate %u up (pps %lu ov_pps %lu idlems %lu)\n",
+                        ctx->rate,
+                        (unsigned long)ctx->stats.fw_pps,
+                        (unsigned long)ctx->stats.overlimit_pps,
+                        (unsigned long)ctx->stats.idlems);
       }
-      rate = ctx->rate;
-      rate = rate - (rate*percent)/100;
-      ctx->rate = rate;
-      avm_pa_tbf_update(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
-      ctx->tbf_enabled = 1;
-      printk(KERN_INFO "avm_pa: load reduce 0, rate %u down (pps %lu ov_pps %lu irqms %lu)\n",
-                     ctx->rate,
-                     (unsigned long)ctx->stats.fw_pps,
-                     (unsigned long)ctx->stats.overlimit_pps,
-                     (unsigned long)ctx->stats.irqms);
-   } else if (   overlimit
-              && ctx->load_reduce == 0
-              && ctx->stats.irqms < ctx->mswin_low) {
-      unsigned rate = ctx->rate;
-      unsigned percent = 1;
-      rate = rate + (rate*percent)/100;
-      ctx->rate = rate;
-      avm_pa_tbf_update(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
-      printk(KERN_INFO "avm_pa: load reduce 0, rate %u up (pps %lu ov_pps %lu irqms %lu)\n",
-                     ctx->rate,
-                     (unsigned long)ctx->stats.fw_pps,
-                     (unsigned long)ctx->stats.overlimit_pps,
-                     (unsigned long)ctx->stats.irqms);
    }
    avm_pa_start_lc_timer();
 }
@@ -3799,10 +3898,11 @@
    struct avm_pa_global *ctx = &pa_glob;
    unsigned rate;
 
-   if (ctx->disabled || ctx->load_control == 0) {
+   if (ctx->disabled || (ctx->load_control & LOADCONTROL_POWER) == 0) {
       ctx->load_reduce = 0;
       return;
    }
+
    if (load_reduce < 0) load_reduce = 0;
    else if (load_reduce > 10) load_reduce = 10;
 
@@ -3852,6 +3952,7 @@
 }
 #endif
 
+#if AVM_PA_TOKSTATS
 static void pa_show_tstats(pa_fprintf fprintffunc, void *arg)
 {
    struct avm_pa_global *ctx = &pa_glob;
@@ -3900,22 +4001,26 @@
       ctx->task = 0;
    }
 }
+#endif
 
 static void avm_pa_enable(void)
 {
    struct avm_pa_global *ctx = &pa_glob;
+#if AVM_PA_TOKSTATS
    avm_pa_thread_start();
+#endif
    avm_pa_setup_est();
    avm_pa_setup_cputime_est();
    avm_pa_tbf_init(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
-   if (ctx->load_control)
-      avm_pa_start_lc_timer();
+   avm_pa_start_lc_timer();
 }
 
 static void avm_pa_disable(void)
 {
    avm_pa_tbf_exit();
+#if AVM_PA_TOKSTATS
    avm_pa_thread_stop();
+#endif
    avm_pa_unsetup_cputime_est();
    avm_pa_unsetup_est();
    avm_pa_stop_lc_timer();
@@ -3948,6 +4053,30 @@
 };
 
 /* ------------------------------------------------------------------------ */
+
+static int status_show(struct seq_file *m, void *v)
+{
+    pa_show_status((pa_fprintf *)seq_printf, m);
+    return 0;
+}
+
+static int status_show_open(struct inode *inode, struct file *file)
+{
+    return single_open(file, status_show, PDE(inode)->data);
+}
+
+static const struct file_operations status_show_fops = {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 32)
+    .owner   = THIS_MODULE,
+#endif
+    .open    = status_show_open,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .release = seq_release,
+};
+
+/* ------------------------------------------------------------------------ */
+
 static int stats_show(struct seq_file *m, void *v)
 {
     pa_show_stats((pa_fprintf *)seq_printf, m);
@@ -4333,6 +4462,7 @@
 
 /* ------------------------------------------------------------------------ */
 
+#if AVM_PA_TOKSTATS
 static int tstats_show(struct seq_file *m, void *v)
 {
    pa_show_tstats((pa_fprintf *)seq_printf, m);
@@ -4353,6 +4483,7 @@
    .llseek  = seq_lseek,
    .release = seq_release,
 };
+#endif
 
 /* ------------------------------------------------------------------------ */
 
@@ -4443,21 +4574,50 @@
 
    /* loadcontrol | noloadcontrol */
    } else if (strcmp(argv[0], "loadcontrol") == 0) {
-      ctx->load_control = 1;
-      ctx->rate = ctx->maxrate;
-      avm_pa_start_lc_timer();
-      if (ctx->load_reduce) {
-         avm_pa_tbf_update(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
-         ctx->tbf_enabled = 1;
+      if (argv[1]) {
+         if (strcmp(argv[1], "irq") == 0) {
+            ctx->load_control = LOADCONTROL_IRQ;
+         } else if (strcmp(argv[1], "idle") == 0) {
+            ctx->load_control = LOADCONTROL_IDLE;
+         } else if (strcmp(argv[1], "off") == 0) {
+            ctx->load_control = LOADCONTROL_OFF;
+         } else {
+            ctx->load_control = LOADCONTROL_POWERIRQ;
+         }
       } else {
+         ctx->load_control = LOADCONTROL_POWERIRQ;
+      }
+      if (   ctx->load_control == LOADCONTROL_OFF 
+          || (   (ctx->load_control & LOADCONTROL_POWER)
+              && ctx->load_reduce == 0)) {
          avm_pa_tbf_disable();
+      } else {
+         ctx->rate = ctx->maxrate;
+         avm_pa_start_lc_timer();
+         if ((ctx->load_control & LOADCONTROL_POWER) && ctx->load_reduce) {
+            avm_pa_tbf_update(ctx->rate, ctx->pktbuffer, ctx->pktpeak);
+            ctx->tbf_enabled = 1;
+         }
+      }
+      switch (ctx->load_control) {
+         case LOADCONTROL_OFF:
+            printk(KERN_DEBUG "avm_pa: loadcontrol off\n");
+            break;
+         case LOADCONTROL_IRQ:
+            printk(KERN_DEBUG "avm_pa: loadcontrol irq\n");
+            break;
+         case LOADCONTROL_IDLE:
+            printk(KERN_DEBUG "avm_pa: loadcontrol idle\n");
+            break;
+         case LOADCONTROL_POWERIRQ:
+            printk(KERN_DEBUG "avm_pa: loadcontrol powerirq\n");
+            break;
       }
-      printk(KERN_DEBUG "avm_pa: loadcontrol enabled\n");
 
    } else if (strcmp(argv[0], "noloadcontrol") == 0) {
-      ctx->load_control = 0;
+      ctx->load_control = LOADCONTROL_OFF;
       avm_pa_tbf_disable();
-      printk(KERN_DEBUG "avm_pa: loadcontrol disabled\n");
+      printk(KERN_DEBUG "avm_pa: loadcontrol off\n");
 
    /* tbfenable | tbfdisable */
    } else if (strcmp(argv[0], "tbfenable") == 0) {
@@ -4472,14 +4632,27 @@
       unsigned mswin;
       if (argv[1]) {
          mswin = simple_strtoul(argv[1], 0, 10);
-         if (mswin > 0) ctx->mswin_low = mswin;
+         if (mswin > 0) ctx->irq_mswin_low = mswin;
       }
       if (argv[2]) {
          mswin = simple_strtoul(argv[2], 0, 10);
-         if (mswin > 0) ctx->mswin_high = mswin;
+         if (mswin > 0) ctx->irq_mswin_high = mswin;
       }
       printk(KERN_DEBUG "avm_pa: mswin %u %u\n", 
-                        ctx->mswin_low, ctx->mswin_high);
+                        ctx->irq_mswin_low, ctx->irq_mswin_high);
+   /* idlewin 10 20 */
+   } else if (strcmp(argv[0], "idlewin") == 0) {
+      unsigned mswin;
+      if (argv[1]) {
+         mswin = simple_strtoul(argv[1], 0, 10);
+         if (mswin > 0) ctx->idle_mswin_low = mswin;
+      }
+      if (argv[2]) {
+         mswin = simple_strtoul(argv[2], 0, 10);
+         if (mswin > 0) ctx->idle_mswin_high = mswin;
+      }
+      printk(KERN_DEBUG "avm_pa: idlewin %u %u\n", 
+                        ctx->idle_mswin_low, ctx->idle_mswin_high);
    /* ewma 0-31 */
    } else if (strcmp(argv[0], "ewma") == 0) {
       if (argv[1]) {
@@ -4682,13 +4855,16 @@
    }
 
    file_entry = proc_create("brief", S_IRUGO, dir_entry, &brief_show_fops);
+   file_entry = proc_create("status", S_IRUGO, dir_entry, &status_show_fops);
    file_entry = proc_create("stats", S_IRUGO, dir_entry, &stats_show_fops);
    file_entry = proc_create("pids", S_IRUGO, dir_entry, &pids_show_fops);
    file_entry = proc_create("vpids", S_IRUGO, dir_entry, &vpids_show_fops);
    file_entry = proc_create("sessions", S_IRUGO, dir_entry, &sess_show_fops);
    file_entry = proc_create("bsessions", S_IRUGO, dir_entry, &bsess_show_fops);
    file_entry = proc_create("macaddrs", S_IRUGO, dir_entry, &macaddr_show_fops);
+#if AVM_PA_TOKSTATS
    file_entry = proc_create("tokstats", S_IRUGO, dir_entry, &tstats_show_fops);
+#endif
    file_entry = proc_create("hashes", S_IRUGO, dir_entry, &hash_show_fops);
 }
 
@@ -4696,13 +4872,16 @@
 {
    remove_proc_entry("control", dir_entry);
    remove_proc_entry("brief", dir_entry);
+   remove_proc_entry("status", dir_entry);
    remove_proc_entry("stats", dir_entry);
    remove_proc_entry("pids", dir_entry);
    remove_proc_entry("vpids", dir_entry);
    remove_proc_entry("sessions", dir_entry);
    remove_proc_entry("bsessions", dir_entry);
    remove_proc_entry("macaddrs", dir_entry);
+#if AVM_PA_TOKSTATS
    remove_proc_entry("tokstats", dir_entry);
+#endif
    remove_proc_entry("hashes", dir_entry);
    remove_proc_entry("avm_pa", init_net.proc_net);
 }
diff -Naur linux-2.6.28/net/ti/pp/hil_intrusive.c linux-2.6.28/net/ti/pp/hil_intrusive.c
--- linux-2.6.28/net/ti/pp/hil_intrusive.c	2011-09-19 12:00:04.000000000 +0200
+++ linux-2.6.28/net/ti/pp/hil_intrusive.c	2011-10-18 10:36:02.000000000 +0200
@@ -1576,10 +1576,10 @@
 
         if (ptr_session->egress[0].app_specific_data.u.app_desc.enables & TI_HIL_TCP_SYN)
         {
-			PAL_osProtectExit(PAL_OSPROTECT_INTERRUPT, lockKey);
             /* In case it's a SYN packet - do not open the session yet, but make it expedited in DOCSIS Upstream */
 			if (TI_PP_PID_TYPE_DOCSIS == pid.type && PP_WLAN_PID_BASE != vpid.parent_pid_handle)
 			   skb->ti_meta_info |= DOCSIS_FW_PACKET_API_TCP_HIGH_PRIORITY;
+			PAL_osProtectExit(PAL_OSPROTECT_INTERRUPT, lockKey);
             return 0;
         }
         else
