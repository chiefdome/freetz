--- pppd/plugins/rp-pppoe/pppoe-discovery.c.org	2009-11-05 10:43:02.000000000 +0100
+++ pppd/plugins/rp-pppoe/pppoe-discovery.c	2009-11-05 10:49:53.000000000 +0100
@@ -47,14 +47,8 @@
 #include <net/if_arp.h>
 #endif
 
-char *xstrdup(const char *s);
 void usage(void);
 
-void die(int status)
-{
-	exit(status);
-}
-
 /* Initialize frame types to RFC 2516 values.  Some broken peers apparently
    use different frame types... sigh... */
 
@@ -124,27 +118,27 @@ openInterface(char const *ifname, UINT16
     if ((fd = socket(domain, stype, htons(type))) < 0) {
 	/* Give a more helpful message for the common error case */
 	if (errno == EPERM) {
-	    rp_fatal("Cannot create raw socket -- pppoe must be run as root.");
+	    fatal("Cannot create raw socket -- pppoe must be run as root.");
 	}
-	fatalSys("socket");
+	fatal("socket");
     }
 
     if (setsockopt(fd, SOL_SOCKET, SO_BROADCAST, &optval, sizeof(optval)) < 0) {
-	fatalSys("setsockopt");
+	fatal("setsockopt");
     }
 
     /* Fill in hardware address */
     if (hwaddr) {
 	strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
 	if (ioctl(fd, SIOCGIFHWADDR, &ifr) < 0) {
-	    fatalSys("ioctl(SIOCGIFHWADDR)");
+	    fatal("ioctl(SIOCGIFHWADDR)");
 	}
 	memcpy(hwaddr, ifr.ifr_hwaddr.sa_data, ETH_ALEN);
 #ifdef ARPHRD_ETHER
 	if (ifr.ifr_hwaddr.sa_family != ARPHRD_ETHER) {
 	    char buffer[256];
 	    sprintf(buffer, "Interface %.16s is not Ethernet", ifname);
-	    rp_fatal(buffer);
+	    fatal(buffer);
 	}
 #endif
 	if (NOT_UNICAST(hwaddr)) {
@@ -152,14 +146,14 @@ openInterface(char const *ifname, UINT16
 	    sprintf(buffer,
 		    "Interface %.16s has broadcast/multicast MAC address??",
 		    ifname);
-	    rp_fatal(buffer);
+	    fatal(buffer);
 	}
     }
 
     /* Sanity check on MTU */
     strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
     if (ioctl(fd, SIOCGIFMTU, &ifr) < 0) {
-	fatalSys("ioctl(SIOCGIFMTU)");
+	fatal("ioctl(SIOCGIFMTU)");
     }
     if (ifr.ifr_mtu < ETH_DATA_LEN) {
 	fprintf(stderr, "Interface %.16s has MTU of %d -- should be %d.\n",
@@ -174,7 +168,7 @@ openInterface(char const *ifname, UINT16
 
     strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
     if (ioctl(fd, SIOCGIFINDEX, &ifr) < 0) {
-	fatalSys("ioctl(SIOCFIGINDEX): Could not get interface index");
+	fatal("ioctl(SIOCFIGINDEX): Could not get interface index");
     }
     sa.sll_ifindex = ifr.ifr_ifindex;
 
@@ -184,7 +178,7 @@ openInterface(char const *ifname, UINT16
 
     /* We're only interested in packets on specified interface */
     if (bind(fd, (struct sockaddr *) &sa, sizeof(sa)) < 0) {
-	fatalSys("bind");
+	fatal("bind");
     }
 
     return fd;
@@ -207,18 +201,18 @@ sendPacket(PPPoEConnection *conn, int so
 {
 #if defined(HAVE_STRUCT_SOCKADDR_LL)
     if (send(sock, pkt, size, 0) < 0) {
-	sysErr("send (sendPacket)");
+	fatal("send (sendPacket)");
 	return -1;
     }
 #else
     struct sockaddr sa;
 
     if (!conn) {
-	rp_fatal("relay and server not supported on Linux 2.0 kernels");
+	fatal("relay and server not supported on Linux 2.0 kernels");
     }
     strcpy(sa.sa_data, conn->ifName);
     if (sendto(sock, pkt, size, 0, &sa, sizeof(sa)) < 0) {
-	sysErr("sendto (sendPacket)");
+	fatal("sendto (sendPacket)");
 	return -1;
     }
 #endif
@@ -240,7 +234,7 @@ int
 receivePacket(int sock, PPPoEPacket *pkt, int *size)
 {
     if ((*size = recv(sock, pkt, sizeof(PPPoEPacket), 0)) < 0) {
-	sysErr("recv (receivePacket)");
+	fatal("recv (receivePacket)");
 	return -1;
     }
     return 0;
@@ -640,17 +634,17 @@ int main(int argc, char *argv[])
 
     conn = malloc(sizeof(PPPoEConnection));
     if (!conn)
-	fatalSys("malloc");
+	fatal("malloc");
 
     memset(conn, 0, sizeof(PPPoEConnection));
 
     while ((opt = getopt(argc, argv, "I:D:VUAS:C:h")) > 0) {
 	switch(opt) {
 	case 'S':
-	    conn->serviceName = xstrdup(optarg);
+	    conn->serviceName = strDup(optarg);
 	    break;
 	case 'C':
-	    conn->acName = xstrdup(optarg);
+	    conn->acName = strDup(optarg);
 	    break;
 	case 'U':
 	    conn->useHostUniq = 1;
@@ -665,7 +659,7 @@ int main(int argc, char *argv[])
 	    fprintf(conn->debugFile, "pppoe-discovery %s\n", RP_VERSION);
 	    break;
 	case 'I':
-	    conn->ifName = xstrdup(optarg);
+	    conn->ifName = strDup(optarg);
 	    break;
 	case 'A':
 	    /* this is the default */
@@ -682,7 +676,7 @@ int main(int argc, char *argv[])
 
     /* default interface name */
     if (!conn->ifName)
-	conn->ifName = strdup("eth0");
+	conn->ifName = strDup("eth0");
 
     conn->discoverySocket = -1;
     conn->sessionSocket = -1;
@@ -692,31 +686,6 @@ int main(int argc, char *argv[])
     exit(0);
 }
 
-void rp_fatal(char const *str)
-{
-    fprintf(stderr, "%s\n", str);
-    exit(1);
-}
-
-void fatalSys(char const *str)
-{
-    perror(str);
-    exit(1);
-}
-
-void sysErr(char const *str)
-{
-    rp_fatal(str);
-}
-
-char *xstrdup(const char *s)
-{
-    register char *ret = strdup(s);
-    if (!ret)
-	sysErr("strdup");
-    return ret;
-}
-
 void usage(void)
 {
     fprintf(stderr, "Usage: pppoe-discovery [options]\n");
--- pppd/plugins/rp-pppoe/pppoe.h.org	2009-11-05 10:52:32.000000000 +0100
+++ pppd/plugins/rp-pppoe/pppoe.h	2009-11-05 10:54:05.000000000 +0100
@@ -273,6 +273,12 @@ void discovery(PPPoEConnection *conn);
 unsigned char *findTag(PPPoEPacket *packet, UINT16_t tagType,
 		       PPPoETag *tag);
 
+void dbglog(char *, ...);	/* log a debug message */
+void info(char *, ...);		/* log an informational message */
+void warn(char *, ...);		/* log a warning message */
+void error(char *, ...);	/* log an error message */
+void fatal(char *, ...);	/* log an error message and die(1) */
+
 void pppoe_printpkt(PPPoEPacket *packet,
 		    void (*printer)(void *, char *, ...), void *arg);
 void pppoe_log_packet(const char *prefix, PPPoEPacket *packet);
