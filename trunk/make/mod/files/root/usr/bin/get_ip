#!/bin/sh

[ -r /mod/etc/conf/mod.cfg ] && . /mod/etc/conf/mod.cfg

# Global result
IP=""

helpmsg() {
cat << EOF
get_ip - determine external IP address

Usage: $0 [option]
    -a, --all      - use all methods [recommended]
                     order: route, stun for DSL boxes, vice versa for IP clients (ATA, UMTS)
    -s, --stun     - use STUN server (stun.1und1.de)
    -r, --route    - use routing table
    -?, --help     - print this help message

  current default method: $MOD_GET_IP_METHOD

EOF
}

# Detect private (RFC 1918) or link-local (RFC 5735) IPs
# Returns 0 for public IP, 1 for private IP, 2 if IP == ""
ip_public()
{
	[ "$1" ] || return 2
	local ip=$1
	# 10.0.0.0/8 (private), 192.168.0.0/16 (private), 169.254.0.0/16 (link-local)
	(
		[ "$ip" != "${ip#10.}" ] ||
		[ "$ip" != "${ip#192.168.}" ] ||
		[ "$ip" != "${ip#169.254.}" ]
	) && return 1
	# 172.16.0.0/12 (private)
	[ "$ip" == "${ip#172.}" ] && return 0
	ip=$(echo $ip | cut -d '.' -f 2)
	[ $ip -ge 16  ] && [ $ip -le 31 ] && return 1 || return 0
}

via_route() {
	# AVM's home-brew NAT does not expose the external IP on network interface
	# "dsl", but sets a route to it. This method should work on all DSL boxes,
	# in contrast to other methods which are dependent on the availability of
	# certain AVM binaries or firmware features. Besides, this method is faster
	# than the other ones anyway.
	for ip in $(route -n | sed -nr 's/^([1-9][0-9]*\.[0-9]+\.[0-9]+\.[0-9]+) +.* +dsl$/\1/p'); do
		ip_public "$ip" && IP="$ip" && return 0
	done
	return 1
}

via_stun() {
	# On IP clients (ATA mode or UMTS), we are behind a NAT and the only way to
	# determine the external IP is to get the information from an external
	# server. The most efficient method is STUN (stun-ip applet will try 3x).
	IP=$(stun-ip stun.1und1.de)
	[ $? -eq 0 ] && [ "$IP" ] && return 0
	return 1
}

# Set user-defined method (e.g. via web UI) if no argument is given
[ $# -eq 0 ] && method="$MOD_GET_IP_METHOD" || method="$1"

case $method in
	-a|--all|"")
		ext_last="stun"
		# IP client? -> make STUN the method to try first
		[ -r /var/run/ip_client ] && ext_first="stun" && ext_last=""
		for mode in $ext_first route $ext_last; do
			via_$mode
			if [ $? -eq 0 ]; then
				# IP client? -> set semaphore
				[ "$mode" == "stun" ] && touch /var/run/ip_client
				break
			fi
		done
		;;
	-r|--route)
		via_route
		;;
	-s|--stun)
		via_stun
		;;
	-d|--dsld|-o|--ostat|-w|--webcm)
		echo "warning: method $method is obsolete, using --route instead" >&2
		via_route
		;;
	-e|--extquery)
		echo "warning: method $method is obsolete, using --stun instead" >&2
		via_stun
		;;
	-?|-h|--help)
		helpmsg
		exit 0
		;;
	*)
		helpmsg >&2
		exit 1
		;;
esac

[ $? -ne 0 ] && echo "get_ip error" >&2 && exit 1
echo "$IP"
