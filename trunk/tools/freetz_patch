#!/bin/bash

# Freetz patch tool with optional auto-fix feature
#
# This script can either be dot-included via '. tools/freetz_patch' to get an
# in-process definition of the 'modpatch' shell function or executed directly.
# The execution mode will be determined by checking if $0 has the base name
# 'freetz_patch'.
#
# The functionality has evolved from the original "modpatch" function in
# Freetz's 'fwmod' script (cf. copyright information there).
# The additional auto-fix feature for self-healing patches was developed by
# Alexander Kriegisch (kriegaex), 2007-06-25.
# MD5 extension added by cuma, 2011


helpmsg()
{
cat >&2 << EOF

$freetz_patch_name - Freetz patch tool with optional auto-fix feature

Usage: $freetz_patch_name <target-dir> <patch-file|md5-dir> [md5-source]
    target-dir   - target directory to apply patch to
    patch-file   - patch file name (unified context diff, patch level -p0)
    md5-dir      - directory with patch files, named "*<MD5>*.patch"
    md5-source   - from which file md5 is computed (optional)
	               if this is not set, the first file in .patch is used

Examples:
    $freetz_patch_name source/my-package patches/my.patch
    $freetz_patch_name another/package another.patch 2
    $freetz_patch_name third/package patches-directory/
    $freetz_patch_name fourth/package patches-directory/ somewhere/file_for_md5

Environment variables changing behaviour:
    FREETZ_VERBOSITY_LEVEL  - verbose output, if >= 2
    VERBOSE                 - verbose output, if == '-v'
    AUTO_FIX_PATCHES        - try to auto-fix fuzzy non-md5 patches, if == 'y'

EOF
}


modpatch()
{
	if [ $# -ne 2 -a $# -ne 3 ]; then
		helpmsg
		return 1
	fi
	local is_verbose=""
	if [ "$FREETZ_VERBOSITY_LEVEL" ] && [ "$FREETZ_VERBOSITY_LEVEL" -ge 2 ] || [ "$VERBOSE" == "-v" ]; then
		is_verbose="y"
	fi
	local _auto_fix_patches="$AUTO_FIX_PATCHES"
	local target_dir="$1"
	local patch_file="$2"
	## md5 start
	if [ -d "$patch_file" ]; then
		_auto_fix_patches=""
		local patch_target="$3"
		if [ -z "$patch_target" ]; then
			patch_target="$(grep -m1 '^+++ ' $patch_file/*.patch 2>/dev/null | sed -n 's/.*patch:+++ \(.*\)\t.*/\1/p' | sort -u)"
			echo "$patch_target" | grep -q " " && patch_target=""
			[ -z "$patch_target" ] && error 2 "modpatch: Could not determine target file"
		fi
		[ -e "$target_dir"/"$patch_target" ] || error 2 "modpatch: Target file $patch_target does not exist"
		local target_md5="$(md5sum "$target_dir"/"$patch_target" | sed -n 's/\([a-f0-9]*\) .*$/\1/p')"
		local md5_patch="$(find "$patch_file" -name *${target_md5}*.patch)"
		if [ -z "$md5_patch" ]; then
			[ -n "$target_md5" ] && local md5_error="for $patch_target (MD5: $target_md5)"
			error 2 "modpatch: No matching patch found in $patch_file $md5_error"
		else
			patch_file="$md5_patch"
		fi
	fi
	## md5 end
	local backup
	local do_fix
	local files
	local file_count
	if [ "$_auto_fix_patches" == "y" ]; then
		local output=$(patch --dry-run -d "$target_dir" -p0 < "$patch_file" 2> /dev/null)
		if [ $? -eq 0 ] && echo "$output" | grep -E '^Hunk ' > /dev/null 2>&1; then
			do_fix="y"
			backup="-b "
			IFS=$'\n'
			files=( $(lsdiff -n "$patch_file" | sed -r 's/^[0-9]+[[:space:]]+(.*)/\1/') )
			unset IFS
			file_count=${#files[@]}
		fi
	fi
	[ ! -e $patch_file ] && error 2 "modpatch: Could not find patch-file $patch_file"
	local STATUS
	if [ "$is_verbose" ]; then
		echo2 "applying patch file $patch_file"
		patch --force ${backup}-d "$target_dir" -p0 --no-backup-if-mismatch < "$patch_file" 2>&1 | sed -e "s/^/${L2}/g"
		STATUS=${PIPESTATUS[0]}
		echo2 "----------------------------------------------------------------------"
	else
		patch --force ${backup}-d "$target_dir" -p0 --no-backup-if-mismatch < "$patch_file" > /dev/null
		STATUS=$?
	fi
	if [ $STATUS -gt 0 ]; then
		error 2 "modpatch: Error in patch-file $patch_file"
	elif [ "$_auto_fix_patches" == "y" ] && [ "$do_fix" == "y" ]; then
		echo2 "auto-fixing fuzzy patch file $patch_file"
		local patch_file="$(realpath "$patch_file")"
		mv -f "$patch_file" "$patch_file.orig"
		cd "$target_dir"
		local timestamp="$(date --rfc-3339=seconds)"
		for (( i=0; i<$file_count; i++ )); do
			local _file="${files[i]}"
			# If backup exists, but is unreadable and has a size of zero, it
			# was created as a placeholder by 'patch -b' previously and can be
			# safely deleted. It even must be deleted in order to avoid a diff
			# error because it is unreadable.
			[ -f "$_file.orig" ] && [ ! -r "$_file.orig" ] && [ ! -s "$_file.orig" ] \
				&& rm -f "$_file.orig"
			# Auto-fix possibly fuzzy patch by re-diffing patched file against original
			diff -Naur --label "$_file	$timestamp" --label "$_file	$timestamp" "$_file.orig" "$_file" >> "$patch_file"
			rm -f "$_file.orig"
		done
		cd - > /dev/null
		echo2 "----------------------------------------------------------------------"
	fi
}


# Declare unknown function 'echo2', if not dot-included by fwmod
if ! declare -F | awk '{print $3}' | grep -q echo2; then
	echo2()
	{
		if [ "$FREETZ_VERBOSITY_LEVEL" ] && [ "$FREETZ_VERBOSITY_LEVEL" -ge 2 ] || [ "$VERBOSE" == "-v" ]; then
			echo -e "$1"
		fi
	}
fi

# Declare unknown function 'error', if not dot-included by fwmod
if ! declare -F | awk '{print $3}' | grep -q error; then
	error()
	{
		if [ "$1" -gt 0 ]; then
			echo -e "${__Y}ERROR: $2${__N}" 1>&2
			exit $1
		fi
	}
fi

# Direct script call? -> delegate parameters to shell function
if [ "$(basename "$0")" == "freetz_patch" ]; then
	freetz_patch_name="freetz_patch"
	modpatch "$@"
else
	freetz_patch_name="modpatch"
fi


# Strip one directory level from one patch file
#
# The only parameter is the name of the patch file to be stripped in place -
# no backup! The patch file must be a unidiff, and no care is taken of spaces,
# tabs or slashes within path names.
#
# Note: This is just an inofficial little add-on and not part of the official
# Freetz patch procedure, use at own risk. The function might come in handy if
# you wish to canonise a set of patch files so they can be applied with patch
# level zero (-p0).
strip_patch_level()
{
	echo "Stripping one directory level from $1"
	sed -i -r 's/^(---|\+\+\+) [^/]+\//\1 /' "$1"
}
