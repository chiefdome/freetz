--- library/Makefile	2007-10-20 00:00:00.000000000 +0200
+++ library/Makefile	2007-10-25 00:02:23.000000000 +0200
@@ -24,7 +24,7 @@
 	net.o		padlock.o	rsa.o		\
 	sha1.o		sha2.o		sha4.o		\
 	ssl_cli.o	ssl_srv.o	ssl_tls.o	\
-	timing.o	x509parse.o
+	timing.o	x509parse.o x509write.o
 
 .SILENT:
 
--- library/x509write.c	2007-10-20 00:00:00.000000000 +0200
+++ library/x509write.c	2007-10-25 01:00:24.000000000 +0200
@@ -118,7 +118,7 @@
         x509_realloc_node(node, (size_t) size + tl);
 
     if (node->data == NULL)
-        return ERR_X509_MEMORY_ALLOC_FAILED;
+        return 1;
 
     /* tag */
     *(node->p) = tag & 0xFF;
@@ -138,7 +138,7 @@
 
         memcpy(node->p, value, (size_t) size);
         if ((node->p += size -1) != node->end)
-            return ERR_X509_POINT_ERROR;
+            return XYSSL_ERR_X509_POINT_ERROR;
     } else {
         /* make nothing -> NULL */
     }
@@ -169,7 +169,7 @@
         byte += 1;
 
     if (x509_realloc_node(node, (size_t) byte + 2) != 0)
-        return ERR_X509_MEMORY_ALLOC_FAILED;
+        return 1;
 
     /* tag */
     *(node->p) = ASN1_INTEGER;
@@ -192,7 +192,7 @@
     }
 
     if (node->p != node->end)
-        return ERR_X509_POINT_ERROR;
+        return XYSSL_ERR_X509_POINT_ERROR;
 
     return 0;
 }
@@ -216,11 +216,11 @@
         x509_realloc_node(node, size + (size_t) tl);
 
     if (node->data == NULL)
-        return ERR_X509_MEMORY_ALLOC_FAILED;
+        return 1;
 
     buf = (unsigned char*) malloc(size);
-    if (mpi_write_binary(value, buf, &buf_len) != 0)
-        return ERR_MPI_BUFFER_TOO_SMALL;
+    if (mpi_write_binary(value, buf, buf_len) != 0)
+        return XYSSL_ERR_MPI_BUFFER_TOO_SMALL;
 
     /* tag */
     *(node->p) = tag & 0xFF;
@@ -240,7 +240,7 @@
     free(buf);
 
     if ((node->p += (int) size -1) != node->end)
-        return ERR_X509_POINT_ERROR;
+        return XYSSL_ERR_X509_POINT_ERROR;
 
     return 0;
 }
@@ -264,7 +264,7 @@
         x509_realloc_node(&tmp, node->len + (size_t) tl);
 
     if (tmp.data == NULL)
-        return ERR_X509_MEMORY_ALLOC_FAILED;
+        return 1;
 
     /* tag */
     *(tmp.p) = tag & 0xFF;
@@ -284,7 +284,7 @@
 
     /* good? */
     if ((tmp.p += (int) node->len -1) != tmp.end)
-        return ERR_X509_POINT_ERROR;
+        return XYSSL_ERR_X509_POINT_ERROR;
 
     free(node->data);
     node->data = tmp.data;
@@ -318,10 +318,10 @@
     if ( size > 127) {
         if (x509_realloc_node(node, size + (size_t) 2 + 
                     asn1_eval_octet(size)) != 0)
-            return ERR_X509_MEMORY_ALLOC_FAILED;
+            return 1;
     } else {
         if (x509_realloc_node(node, size + (size_t) 2) != 0)
-            return ERR_X509_MEMORY_ALLOC_FAILED;
+            return 1;
     }
 
     /* tag */
@@ -473,11 +473,11 @@
         node->len = 0;
         node->data = malloc(larger);
         if(node->data == NULL)
-            return ERR_X509_MEMORY_ALLOC_FAILED;
+            return 1;
     } else {
         /* realloc memory */
         if ((node->data = realloc(node->data, node->len + larger)) == NULL)
-            return ERR_X509_MEMORY_ALLOC_FAILED;
+            return 1;
     }
 
     /* init pointer */
@@ -665,7 +665,7 @@
         if (is_tag == 1) {
 
             if (tag_sp == &tag[3])
-                return ERR_X509_VALUE_TO_LENGTH;
+                return XYSSL_ERR_X509_VALUE_TO_LENGTH;
 
             /* is tag end? */
             if (*sp == '=') {
@@ -686,7 +686,7 @@
         } else {
 
             if (text_sp == &text[255])
-                return ERR_X509_VALUE_TO_LENGTH;
+                return XYSSL_ERR_X509_VALUE_TO_LENGTH;
 
             /* is value at end? */
             if (*sp == '\'') {
@@ -836,10 +836,9 @@
     /* create sign */
     sign = (unsigned char *) malloc(sign_len);
     if (sign == NULL)
-        return ERR_X509_MEMORY_ALLOC_FAILED;
+        return 1;
 
-    if ((ret = rsa_pkcs1_sign(privkey, RSA_SHA1, hash, 20, sign, 
-                    sign_len)) != 0)
+    if ((ret = rsa_pkcs1_sign(privkey, RSA_PRIVATE, RSA_SHA1, 20, hash, sign)) != 0)
         return ret;
 
     asn1_add_obj(sign, sign_len, ASN1_BIT_STRING, &chain->sign);
