#!/bin/sh
[ -z "$LIGHTTPD_DOCROOT" ] && exit 1

encloseWithHTTPHost() {
#$1 space- or tab-separated list of virtual hosts or regular expression (with no space or tab in it)
#$2 configuration string
#$3 optional: the character for the equality check (you can only provide "=" or "!" here; default is "=")
if [ -n "$1" ]; then
	eq=$3
	[ -z "$eq" ] && eq="="
	old_IFS=$IFS
	IFS=" 	"
	for i in $1; do
		regexp="~"
		[ -z "$(echo $i | sed 's/[A-Za-z0-9\.]//g')" ] && regexp="="
		echo "\$HTTP[\"host\"] $eq$regexp \"$i\" {"
		echo -e "$2"
		echo "}"
	done
	IFS=$old_IFS
fi
}

virthost_conf() {
#$1, $2 and $3 are the same as in encloseWithHTTPHost
if [ -n "$1" -a -f /usr/lib/lighttpd/mod_evhost.so -a "$LIGHTTPD_VIRTHOST" = "yes" ]; then
	encloseWithHTTPHost "$@"
else
	echo -e "$2"
fi
}

cat << EOF
server.modules = ( "mod_access" )
index-file.names = ( "index.cgi", "index.html", "index.htm", "default.htm", "index.php", "index.rb" )
mimetype.assign = (
".pdf" => "application/pdf",
".sig" => "application/pgp-signature",
".spl" => "application/futuresplash",
".class" => "application/octet-stream",
".ps" => "application/postscript",
".torrent" => "application/x-bittorrent",
".dvi" => "application/x-dvi",
".gz" => "application/x-gzip",
".pac" => "application/x-ns-proxy-autoconfig",
".swf" => "application/x-shockwave-flash",
".tar.gz" => "application/x-tgz",
".tgz" => "application/x-tgz",
".tar" => "application/x-tar",
".zip" => "application/zip",
".mp3" => "audio/mpeg",
".m3u" => "audio/x-mpegurl",
".wma" => "audio/x-ms-wma",
".wax" => "audio/x-ms-wax",
".ogg" => "application/ogg",
".wav" => "audio/x-wav",
".gif" => "image/gif",
".jar" => "application/x-java-archive",
".jpg" => "image/jpeg",
".jpeg" => "image/jpeg",
".png" => "image/png",
".xbm" => "image/x-xbitmap",
".xpm" => "image/x-xpixmap",
".xwd" => "image/x-xwindowdump",
".css" => "text/css",
".html" => "text/html",
".htm" => "text/html",
".js" => "text/javascript",
".asc" => "text/plain",
".c" => "text/plain",
".cpp" => "text/plain",
".log" => "text/plain",
".conf" => "text/plain",
".text" => "text/plain",
".txt" => "text/plain",
".dtd" => "text/xml",
".xml" => "text/xml",
".mpeg" => "video/mpeg",
".mpg" => "video/mpeg",
".mov" => "video/quicktime",
".qt" => "video/quicktime",
".avi" => "video/x-msvideo",
".asf" => "video/x-ms-asf",
".asx" => "video/x-ms-asf",
".wmv" => "video/x-ms-wmv",
".bz2" => "application/x-bzip",
".tbz" => "application/x-bzip-compressed-tar",
".tar.bz2" => "application/x-bzip-compressed-tar",
"" => "application/octet-stream",
)
url.access-deny = ( "~", ".inc" )
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi", ".rb", ".cgi" )
server.port = $LIGHTTPD_PORT
server.pid-file = "/var/run/lighttpd.pid"
server.username = "wwwrun"
server.groupname = "wwwrun"
EOF

out="connection.kbytes-per-second = $LIGHTTPD_LIMITCONN\nserver.kbytes-per-second = $LIGHTTPD_LIMITSRV"
virthost_conf "$LIGHTTPD_LIMITVIRT" "$out"

if [ "$LIGHTTPD_CHROOT" = "yes" ];then
cat << EOF
server.chroot = "$LIGHTTPD_DOCROOT"
EOF
mkdir -p "$LIGHTTPD_DOCROOT/dev"
[ -c "$LIGHTTPD_DOCROOT/dev/null" ] || mknod "$LIGHTTPD_DOCROOT/dev/null" c 1 3
chmod 666 "$LIGHTTPD_DOCROOT/dev/null"
fi

if [ -f /usr/lib/lighttpd/mod_dirlisting.so ]; then
out="dir-listing.activate = \"$LIGHTTPD_DIRLISTING\"\ndir-listing.encoding = \"$LIGHTTPD_DIRLISTINGENC\""
virthost_conf "$LIGHTTPD_DIRLISTINGVIRT" "$out"
fi

enable_ssl() {
cat << EOF
ssl.engine = "$LIGHTTPD_SSLENABLE"
ssl.pemfile = "/tmp/flash/lighttpd_crt.pem"
ssl.use-sslv2 = "disable"
EOF
if [ -r "/tmp/flash/lighttpd_ca.pem" ]; then
	if grep -q "BEGIN CERTIFICATE" /tmp/flash/lighttpd_ca.pem; then
cat << EOF
ssl.ca-file = "/tmp/flash/lighttpd_ca.pem"
EOF
	fi
fi
}

if /usr/bin/lighttpd -V | grep -q "+ SSL Support"; then
if [ "$LIGHTTPD_SSLENABLE" = "enable" ]; then
	if [ "$LIGHTTPD_SSLADDITIONAL" = "yes" ]; then
		virtsrv=""
		if [ -f /usr/lib/lighttpd/mod_evhost.so -a "$LIGHTTPD_VIRTHOST" = "yes" ]; then
			virtsrv=$(echo $LIGHTTPD_SSLVIRT | sed 's/ /|/g')
		fi
		echo "\$SERVER[\"socket\"] == \":$LIGHTTPD_SSLPORT\" {"
		enable_ssl
		[ -n "$virtsrv" ] && virthost_conf "$virtsrv" "url.access-deny = ( \"\" )" "!"
		echo "}"
		out=""
		[ -n "$virtsrv" ] && out="url.access-deny = ( \"\" )"
		if [ -f /usr/lib/lighttpd/mod_redirect.so -a "$LIGHTTPD_SSLREDIRECT" = "yes" ]; then
			echo "server.modules += ( \"mod_redirect\" )"
			[ "$LIGHTTPD_SSLPORT" != "443" ] && REDIRECT_PORT_SUFFIX=":$LIGHTTPD_SSLPORT" || REDIRECT_PORT_SUFFIX=""
			out="url.redirect = ( \"^/(.*)\" => \"https://%1${REDIRECT_PORT_SUFFIX}/\$1\" )"
		fi
		if [ -n "$out" ]; then
			echo "\$SERVER[\"socket\"] == \":$LIGHTTPD_PORT\" {"
			if [ -n "$virtsrv" ]; then
				virthost_conf "($virtsrv)" "$out"
			else
				encloseWithHTTPHost '^([^:]*)(\:[0-9]+)?$' "$out"
			fi
			echo "}"
		fi
	else
		enable_ssl
	fi
fi
fi

gendir() {
	dir="$1"
	[ "$LIGHTTPD_CHROOT" = "yes" ] && dir="$LIGHTTPD_DOCROOT/$dir"
	mkdir -p "$dir"
	chown wwwrun:wwwrun "$dir"
	chmod 700 "$dir"
}

if [ "$LIGHTTPD_LOGGING" = "yes" ]; then
	if [ "$LIGHTTPD_LOGGING_ERROR_FILE" = "yes" ]; then
		gendir "$(dirname $LIGHTTPD_LOGGING_ERROR)"
cat << EOF
server.errorlog = "$LIGHTTPD_LOGGING_ERROR"
EOF
	else
cat << EOF
server.errorlog-use-syslog = "enable"
EOF
	fi
	if [ -f /usr/lib/lighttpd/mod_accesslog.so ]; then
cat << EOF
server.modules += ( "mod_accesslog" )
EOF
		if [ "$LIGHTTPD_LOGGING_ACCESS_FILE" = "yes" ]; then
			gendir "$(dirname $LIGHTTPD_LOGGING_ACCESS)"
cat << EOF
accesslog.filename = "$LIGHTTPD_LOGGING_ACCESS"
EOF
		else
cat << EOF
accesslog.use-syslog = "enable"
EOF
		fi
	fi
fi

if [ -f /usr/lib/lighttpd/mod_cgi.so -a "$LIGHTTPD_MODCGI" = "yes" ]; then
cat << EOF
server.modules += ( "mod_cgi" )
EOF
	out="cgi.assign = ( \".cgi\" => \"\", \"/cgi-bin/\" => \"\" )"
	virthost_conf "$LIGHTTPD_MODCGIVIRT" "$out"
fi

if [ -f /usr/lib/lighttpd/mod_compress.so -a "$LIGHTTPD_MODCOMPRESS" = "yes" ]; then
cat << EOF
server.modules += ( "mod_compress" )
EOF
	gendir "$LIGHTTPD_MODCOMPRESSDIR"
	out="compress.cache-dir = \"$LIGHTTPD_MODCOMPRESSDIR\"\ncompress.filetype  = (\"text/plain\", \"text/html\")"
	virthost_conf "$LIGHTTPD_MODCOMPRESSVIRT" "$out"
fi

if [ "$LIGHTTPD_ERROR" = "yes" ]; then
	out="server.errorfile-prefix = \"$LIGHTTPD_ERRORFILE\""
	virthost_conf "$LIGHTTPD_ERRORVIRT" "$out"
fi

getfiles() {
	dir=$(dirname $1)
	mkdir -p "$LIGHTTPD_DOCROOT/$dir"
	cp -rpf "/$1" "$LIGHTTPD_DOCROOT/$dir"
}

if [ -f /usr/lib/lighttpd/mod_auth.so -a "$LIGHTTPD_AUTH" = "yes" ]; then
cat << EOF
server.modules += ( "mod_auth" )
auth.backend = "htdigest"
auth.backend.htdigest.userfile = "/tmp/flash/lighttpd-htdigest.user"
EOF
[ "$LIGHTTPD_CHROOT" = "yes" ] && getfiles "/tmp/flash/lighttpd-htdigest.user"

IFS="
"
authrequire=$(cat /tmp/flash/lighttpd-rights.user)
virthost_auth=""
out=""
for i in $authrequire; do
	if [ "$(echo $i | cut -c1)" = "[" ]; then
		[ -n "$out" ] && virthost_conf "$virthost_auth" "auth.require = ( $out )"
		out=""
		virthost_auth=$(echo $i | sed 's/^\[//' | sed 's/\]$//')
		continue
	fi
	dir=$(echo $i | cut -d\" -f 2)
	user=$(echo $i | cut -d\" -f 4)
	out="$out \"$dir\" => ( \"method\" => \"$LIGHTTPD_AUTHMETH\", \"realm\" => \"lighttpd\", \"require\" => \"$user\" ),"
done 
virthost_conf "$virthost_auth" "auth.require = ( $out )"
fi

if [ -f /usr/lib/lighttpd/mod_status.so -a "$LIGHTTPD_MODSTATUS" = "yes" ]; then
cat << EOF
server.modules += ( "mod_status" )
status.enable-sort = "$LIGHTTPD_MODSTATUSSORT"
EOF
	out=""
	if [ -n "$LIGHTTPD_MODSTATUSCONFIG" ]; then
		out="status.config-url = \"$LIGHTTPD_MODSTATUSCONFIG\"\n"
	fi
	if [ -n "$LIGHTTPD_MODSTATUSSTATISTIC" ]; then
		out="$out status.statistics-url = \"$LIGHTTPD_MODSTATUSSTATISTIC\"\n"
	fi
	if [ -n "$LIGHTTPD_MODSTATUSSTATUS" ]; then
		out="$out status.status-url = \"$LIGHTTPD_MODSTATUSSTATUS\""
	fi
	[ -n "$out" ] && virthost_conf "$LIGHTTPD_MODSTATUSVIRT" "$out"
fi

socketdir="/var/run/lighttpd"
gendir "$socketdir"
	
genchroot() {
#$1 prog
#$2 chroot dir
	[ "$LIGHTTPD_CHROOT" = "yes" ] || return
	[ -x "$(which ldd)" ] || return
	[ -f "$1" ] || return
	[ -d "$2" ] || return
	dir="$(dirname $1)"
	mkdir -p "$2/$dir"
	cp -pf "/$1" "$2/$dir"
	ldd $1 2>/dev/null | while read -r ln; do
		genchroot "$(echo $ln | awk '{print $3}')" "$2"
	done
}

if [ "$LIGHTTPD_MODFASTCGIPHP" = "yes" -a -f /usr/lib/lighttpd/mod_fastcgi.so ]; then
cat << EOF
server.modules += ( "mod_fastcgi" )
EOF
out="fastcgi.server = ( \".php\" => (( \"socket\" => \"$socketdir/php-fastcgi.socket\", \"bin-path\" => \"$LIGHTTPD_MODFASTCGIPHPPATH\", \"max-procs\" => $LIGHTTPD_MODFASTCGIPHPMAXPROC )) )"
virthost_conf "$LIGHTTPD_MODFASTCGIPHPVIRT" "$out"
genchroot "$LIGHTTPD_MODFASTCGIPHPPATH" "$LIGHTTPD_DOCROOT"
[ "$LIGHTTPD_CHROOT" = "yes" ] && getfiles "/tmp/flash/php.ini"
[ "$LIGHTTPD_CHROOT" = "yes" ] && getfiles "/tmp/flash/php"
fi
if [ "$LIGHTTPD_MODFASTCGIRUBY" = "yes" -a -f /usr/lib/lighttpd/mod_fastcgi.so ]; then
cat << EOF
server.modules += ( "mod_fastcgi" )
EOF
out="fastcgi.server = ( \".rb\" => (( \"socket\" => \"$socketdir/ruby-fastcgi.socket\", \"bin-path\" => \"$LIGHTTPD_MODFASTCGIRUBYPATH\", \"max-procs\" => $LIGHTTPD_MODFASTCGIRUBYMAXPROC )) )"
virthost_conf "$LIGHTTPD_MODFASTCGIRUBYVIRT" "$out"
genchroot "$LIGHTTPD_MODFASTCGIRUBYPATH" "$LIGHTTPD_DOCROOT"
fi

docroot="$LIGHTTPD_DOCROOT"
if [ "$LIGHTTPD_CHROOT" = "yes" ]; then
	docroot="/websites"
	[ "$LIGHTTPD_VIRTHOST" = "yes" ] && mkdir -p "$LIGHTTPD_DOCROOT/websites/default"
fi
if [ -f /usr/lib/lighttpd/mod_evhost.so -a "$LIGHTTPD_VIRTHOST" = "yes" ]; then
cat << EOF
server.modules += ( "mod_evhost" )
evhost.path-pattern = "$docroot/$LIGHTTPD_VIRTHOSTTYPE/"
server.document-root = "$docroot/default"
EOF
else
cat << EOF
server.document-root = "$docroot"
EOF
fi

if [ -f /tmp/flash/lighttpd_add ]; then
	cat /tmp/flash/lighttpd_add
fi

