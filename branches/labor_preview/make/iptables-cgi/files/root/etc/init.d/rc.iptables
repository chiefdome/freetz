#!/bin/sh

DAEMON=iptables
. /etc/init.d/modlibrc

SAVEFILE=/var/tmp/flash/iptables_rules
MODULES="iptable_nat iptable_filter \
		ip_tables ip_nat ip_conntrack ip_conntrack_ftp \
		ipt_LOG ipt_iprange ipt_MASQUERADE ipt_REDIRECT ipt_REJECT \
		x_tables \
		xt_state xt_mark xt_MARK xt_tcpudp"

if [ $(uname -r) = 2.6.19.2  ]; then
  MODULES="$MODULES xt_state xt_mac xt_multiport"
else
  MODULES="$MODULES ipt_state ipt_mac ipt_multiport"
fi

start() {

	if [ ! -r "/mod/etc/conf/$DAEMON.cfg" ]; then
		echo "Error[$DAEMON]: not configured" 1>&2
		exit 1
	fi

	lsmod | grep iptable_filter > /dev/null
	if [ $? -eq 1 ]; then
		echo 'Loading modules ...'
		for MODUL in $MODULES; do
			modprobe $MODUL > /dev/null 2>&1
		done
		echo 'Loading table list ...'
		while read LINE; do
			iptables $LINE
		done < $SAVEFILE
	else
		if grep -q "*gui*" /mod/etc/conf/iptables.cfg; then
			sed -e "s/\*gui\*//g" /mod/etc/conf/iptables.cfg > /var/tmp/iptables_tmp
			cat /var/tmp/iptables_tmp > /mod/etc/conf/iptables.cfg
			rm /var/tmp/iptables_tmp
			echo -n 'Modules are already loaded. Starting rule script ... '
			CONFFILE="iptables.cfg"
			CONFPATH="/mod/etc/conf"

			. $CONFPATH/$CONFFILE

			# Source Address
			if [ "$IPTABLES_SOURCE" = "anywhere" -o -z "$IPTABLES_SOURCE" ]; then
				IPTABLES_SOURCE=''
			else
				IPTABLES_SOURCE='-s '$IPTABLES_SOURCE
			fi

			if [ "$IPTABLES_SPORT" = "ANY" -o -z "$IPTABLES_SPORT" ]; then
				IPTABLES_SPORT=''
			else
				IPTABLES_SPORT="--sport "$IPTABLES_SPORT
			fi

			# Destination Address
			if [ "$IPTABLES_DESTINATION" = "anywhere" -o -z "$IPTABLES_DESTINATION" ]; then
				IPTABLES_DESTINATION=''
			else
				IPTABLES_DESTINATION='-d '$IPTABLES_DESTINATION
			fi

			if [ "$IPTABLES_DPORT" = "ANY" -o -z "$IPTABLES_DPORT" ]; then
				IPTABLES_DPORT=''
			else
				IPTABLES_DPORT=$(grep "^"$IPTABLES_DPORT: /tmp/flash/iptables_services | sed -e "s/.*://g")
				IPTABLES_DPORT='--dport '$IPTABLES_DPORT
			fi

			# Input-Interface
			if [ "$IPTABLES_INPUT_INTERFACE" = "ANY" -o -z "$IPTABLES_INPUT_INTERFACE" ]; then
				IPTABLES_INPUT_INTERFACE=''
			else
				if [ "$IPTABLES_CHAIN" != "OUTPUT" ]; then
					IPTABLES_INPUT_INTERFACE='-i '$IPTABLES_INPUT_INTERFACE
				else
					IPTABLES_INPUT_INTERFACE=''
				fi
			fi
			# Output-Interface
			if [ "$IPTABLES_OUTPUT_INTERFACE" = "ANY" -o -z "$IPTABLES_OUTPUT_INTERFACE" ]; then
				IPTABLES_OUTPUT_INTERFACE=''
			else
				if [ "$IPTABLES_CHAIN" != "INPUT" ]; then
					IPTABLES_OUTPUT_INTERFACE='-o '$IPTABLES_OUTPUT_INTERFACE
				else
					IPTABLES_OUTPUT_INTERFACE=''
				fi
			fi

			# NAT
			if [ "$IPTABLES_NAT" != "None" ]; then
				IPTABLES_RULE="-t nat "$IPTABLES_RULE
				IPTABLES_ACTION=$IPTABLES_NAT
				IPTABLES_INPUT_INTERFACE="-o ${IPTABLES_INPUT_INTERFACE//-i /}"
				if [ "$IPTABLES_NAT" != "Normal" ]; then
					SPECIAL="--to ${IPTABLES_DESTINATION//-d /}"
					IPTABLES_DESTINATION=''
				fi
			fi

			# Apply rule
			echo "<br>"
			echo "rule $IPTABLES_RULE"
			echo "chain $IPTABLES_CHAIN"
			echo "position $IPTABLES_POSITION"
			echo "source $IPTABLES_SOURCE"
			echo "destination $IPTABLES_DESTINATION"
			echo "proto $IPTABLES_PROTOKOLL"
			echo "sport $IPTABLES_SPORT"
			echo "dport $IPTABLES_DPORT"
			echo "input-interface $IPTABLES_INPUT_INTERFACE"
			echo "output-interface $IPTABLES_OUTPUT_INTERFACE"
			echo "action $IPTABLES_ACTION"
			echo "nat $IPTABLES_NAT"
			echo "<br>"
			echo "iptables $IPTABLES_RULE $IPTABLES_CHAIN $IPTABLES_POSITION $IPTABLES_SOURCE $IPTABLES_DESTINATION -p $IPTABLES_PROTOKOLL $IPTABLES_SPORT $IPTABLES_DPORT $IPTABLES_INPUT_INTERFACE $IPTABLES_OUTPUT_INTERFACE -j $IPTABLES_ACTION $SPECIAL"
			iptables $IPTABLES_RULE $IPTABLES_CHAIN $IPTABLES_POSITION $IPTABLES_SOURCE $IPTABLES_DESTINATION -p $IPTABLES_PROTOKOLL $IPTABLES_SPORT $IPTABLES_DPORT $IPTABLES_INPUT_INTERFACE $IPTABLES_OUTPUT_INTERFACE -j $IPTABLES_ACTION $SPECIAL > /dev/null 2>&1

			exitval=$?
			if [ "$exitval" -eq 0 ]; then
				echo 'Rule setting done.'
				save
			else
				echo 'Rule setting failed.'
				exit $exitval
			fi
		else
			echo 'Modules are already loaded'
		fi
	fi
}

save () {
	rm $SAVEFILE
	touch $SAVEFILE
	iptables -vnL --line-numbers >/tmp/test
	iptables -t nat -vnL --line-numbers >>/tmp/test
	sed -e "s/\*/x/g" /var/tmp/test > /var/tmp/iptables_tmp
	rm /var/tmp/test
	i=0
	while read LINE; do
		if [[ $(echo $LINE | grep -c "Chain") = 1 ]]; then
			CHAIN=$(echo $LINE | sed -e "s/Chain //g" | sed -e "s/ (policy.*//g")
			if [ $CHAIN = "PREROUTING" ] || [ $CHAIN = "POSTROUTING" ]; then
				N="-t nat "
			fi
			i=i+1
		else
			echo ${LINE} | grep "^[1-9]" > /dev/null
			if [ $? = 0 ]; then
				SPORT=''; DPORT=''
				A=$(echo $LINE | awk '{print $4}')
				P="-p $(echo $LINE | awk '{print $5}')"
				PORT1=$(echo $LINE | awk '{print $12}')
				echo $PORT1 | grep "spt:" > /dev/null
				if [ $? -eq 0 ]; then
					SPORT="--sport ${PORT1//spt:/}"
				fi
				echo $PORT1 | grep "dpt:" > /dev/null
				if [ $? -eq 0 ]; then
					DPORT="--dport ${PORT1//dpt:/}"
				fi
				PORT2=$(echo $LINE | awk '{print $13}')
				echo $PORT2 | grep "spt:" > /dev/null
				if [ $? -eq 0 ]; then
					SPORT="--sport ${PORT2//spt:/}"
				fi
				echo $PORT2 | grep "dpt:" > /dev/null
				if [ $? -eq 0 ]; then
					DPORT="--dport ${PORT2//dpt:/}"
				fi

				S="-s $(echo $LINE | awk '{print $9}')"
				D="-d $(echo $LINE | awk '{print $10}')"
				I="-i $(echo $LINE | awk '{print $7}')"
				O="-o $(echo $LINE | awk '{print $8}')"

				# Check if input interface is available
				echo $I | grep x > /dev/null
				if [ $? -eq 0 ]; then
					I=""
				fi

				# Check if output interface is available
				echo $O | grep x > /dev/null
				if [ $? -eq 0 ]; then
					O=""
				fi


				echo "$N-A $CHAIN $S $D $P $SPORT $DPORT $I $O -j $A" >> $SAVEFILE
			fi
		fi
	done </var/tmp/iptables_tmp
	rm /var/tmp/iptables_tmp
	echo 'Saving list done.'
	exit 1
}

stop () {
	cat /mod/etc/conf/iptables.cfg | grep "*gui*" > /dev/null
	[ $? -ne 1 ] && return
	lsmod | grep ip_tables > /dev/null
	if [ $? -eq 0 ]; then
		echo 'Unloading modules ...'
		iptables -F
		# remove modules in reverse order
		reverse_list=
		for MODUL in $MODULES; do
			reverse_list="$MODUL $reverse_list"
		done
		for MODUL in $reverse_list; do
			rmmod $MODUL
		done
	else
		echo 'Modules not loaded.'
	fi
}

case $1 in
	""|load)
		modreg cgi 'iptables' 'Iptables'
		modreg daemon $DAEMON
		modreg file iptables rules 'Rules' 0 "iptables"
		modreg file iptables services 'Services' 0 "services"

		[ ! -r "/var/tmp/flash/iptables_services" ] && cp /mod/etc/default.iptables/iptables_services /var/tmp/flash/iptables_services
		[ ! -r "/var/tmp/flash/iptables_rules" ] && touch /var/tmp/flash/iptables_rules

		modlib_start $IPTABLES_ENABLED
		;;
	start)
		if lsmod | grep ip_tables >/dev/null; then
			echo "$DAEMON is already running."
			exit 1
		fi
		start
		;;
	stop)
		if ! lsmod | grep ip_tables >/dev/null; then
			echo "$DAEMON is not running."
			exit 1
		fi
		stop
		;;
	restart)
		stop
		sleep 1
		start
		;;
	status)
		if lsmod | grep ip_tables >/dev/null; then
			echo 'running'
		else
			echo 'stopped'
		fi
		;;
	save)
		save
		;;

	unload)
		modunreg cgi iptables
		modunreg daemon $DAEMON
		modunreg file iptables
		stop
		;;
	*)
		echo "Usage: $0 [load|unload|start|stop|restart|status]" 1>&2
		exit 1
		;;
esac

exit 0
