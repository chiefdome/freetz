#external by cuma
if [ ! "$EXTERNAL_ENABLED" == "y" ]; then
	error 1 "external is used by make"
fi
EXTERNAL_DIRECTORY=`echo $EXTERNAL_DIRECTORY|sed 's/\/*$//'`
mkdir -p "${EXTERNAL_MOD_DIR}"

#preparation for Downloader outsourcing
OUT_DIR="outboard"
OUT_CONF="downloader.conf"
ERROR="EXTERNAL SCRIPT:"
WARNING="EXTERNAL SCRIPT:"
if [ "$EXTERNAL_DOWNLOADER" == "y" ]; then
	if [ -e "$OUT_DIR" ]; then
		echo1 "\"$(pwd)/$OUT_DIR\" is used as directory for outsourced files"
		echo1 "all existing files in this directory will be rewritten"
	else
		echo1 "creating directory \"$(pwd)/$OUT_DIR\" for outsourced files"
		mkdir $OUT_DIR
		TMPERR=$?
		[ $TMPERR -eq 1 ] && error 1 "$ERROR Directory \"$OUT_DIR\" can not be created"
	fi
	if [ -e "$OUT_DIR/$OUT_CONF" ]; then
		echo1 "removing old Downloader configuration file $OUT_DIR/$OUT_CONF"
		rm "$OUT_DIR/$OUT_CONF"
		TMPERR=$?
		[ $TMPERR -eq 1 ] && error 1 "$ERROR $OUT_DIR/$OUT_CONF can not be deleted"
	fi
	echo1 "creating new Downloader configuration file $OUT_DIR/$OUT_CONF"
	touch "$OUT_DIR/$OUT_CONF"
fi

EXTERNAL_FILES="$EXTERNAL_OWN_FILES"
for EXT_FILES in $(find make -maxdepth 2 -name external.files); do
	. $EXT_FILES
done
EXTERNAL_FILES="`echo $EXTERNAL_FILES|sed 's/ / \//g;s/\/\/*/\//g'`"

for EXTERNAL_FILE in $EXTERNAL_FILES; do
	FILENAME=$(basename $EXTERNAL_FILE)
	if [ -L "${FILESYSTEM_MOD_DIR}$EXTERNAL_FILE" ]; then
		warn "$WARNING ${FILESYSTEM_MOD_DIR}$EXTERNAL_FILE is a symbolic link. It will not be outsourced"
	else
		EXTERNAL_LINKSUBDIR=""
		EXTERNAL_TARGETDIR="${EXTERNAL_MOD_DIR}"
		if [ "$EXTERNAL_SUBDIRS" == "y" ]; then
			EXTERNAL_LINKSUBDIR="`dirname $EXTERNAL_FILE`"
			EXTERNAL_TARGETDIR+="$EXTERNAL_LINKSUBDIR"
			mkdir -p "$EXTERNAL_TARGETDIR"
		fi
		EXTERNAL_TEMP="${FILESYSTEM_MOD_DIR}$EXTERNAL_FILE"
		if [ "$EXTERNAL_DOWNLOADER" == "y" ]; then
			FILEPERM=$(ls -l $EXTERNAL_TEMP | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf("%0o",k)}')
			echo2 "packing $FILENAME.gz for Downloader"
			gzip -c "$EXTERNAL_TEMP" > "$OUT_DIR/$FILENAME.gz"
			TMPERR=$?
			[ $TMPERR -eq 1 ] && error 1 "$ERROR $OUT_DIR/$FILENAME.gz can not be created"
		fi
		if [ `ls "$EXTERNAL_TEMP" 2>/dev/null | wc -l` -gt 0 ]; then
			mv "$EXTERNAL_TEMP" "$EXTERNAL_TARGETDIR/"
			EXTERNAL_MSG="moved"
			[ "$EXTERNAL_DOWNLOADER" == "y" ] && echo "$FILENAME $FILEPERM $EXTERNAL_DIRECTORY$EXTERNAL_LINKSUBDIR" >> $OUT_DIR/$OUT_CONF
		else
			EXTERNAL_MSG="not found"
		fi
		ln -s "$EXTERNAL_DIRECTORY$EXTERNAL_LINKSUBDIR/$FILENAME" "${FILESYSTEM_MOD_DIR}$EXTERNAL_FILE"
		echo2 "$EXTERNAL_FILE... $EXTERNAL_MSG & linked"
	fi
done
echo "$EXTERNAL_DIRECTORY" > "${EXTERNAL_MOD_DIR}/.external"
if [ "$EXTERNAL_DOWNLOADER" == "y" ]; then
	echo "  NOTE: Please upload gezipped Downloader files from"
	echo "        \"$(pwd)/$OUT_DIR\" to your http or ftp server"
	echo "        and copy the Downloader configuration from"
	echo "        \"$(pwd)/$OUT_DIR/$OUT_CONF\" into Downloader WEBUI"
elif [ ! "$EXTERNAL_CREATEPAK" == "y" ]; then
	echo "  NOTE: Please copy content of"
	echo "        build/modified/external/ to $EXTERNAL_DIRECTORY"
	echo "        on your box BEFORE you flash the reduced image"
fi
