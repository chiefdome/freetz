#!/bin/sh
# Freetz controller
CR=$'\r'

redirect() {
    cat << EOF
Status: 302 Found$CR
Location: $1$CR
$CR
EOF
    exit
}

# remove trailing slash from URL
redirect_folder() {
# violates RFC (demands absolute URL) but is supported by major browsers
    redirect "$SCRIPT_NAME${PATH_INFO%/}${QUERY_STRING:+?$QUERY_STRING}"
}

# redirect within the (virtual) URL tree
redirect_freetz() {
    redirect "$SCRIPT_NAME$1"
}

# pass control to another CGI
CGI_DIR=${SCRIPT_FILENAME%/*}/cgi-bin
dispatch() {
    local name=$1 url_prefix=$2
    export PATH_INFO=${PATH_INFO#"$url_prefix"}
    export SCRIPT_NAME="$SCRIPT_NAME$url_prefix"
    export SCRIPT_FILENAME="$CGI_DIR/$name"
    exec "$SCRIPT_FILENAME" "$@"
}

prepend_query() {
    QUERY_STRING="$1${QUERY_STRING:+&$QUERY_STRING}"
}

error_not_found() {
# during development
    cgi_info
}

cgi_info() {
    cat << EOF
Status: 404 Not Found$CR
Content-Type: text/plain$CR
$CR
404 Not Found

    REQUEST_URI=$REQUEST_URI
    SCRIPT_NAME=$SCRIPT_NAME
SCRIPT_FILENAME=$SCRIPT_FILENAME
      PATH_INFO=$PATH_INFO

EOF
    set | grep -v '^CONFIG_\|^MOD_'
}

case $PATH_INFO in
    /)			redirect_freetz /status ;;
    */)			redirect_folder ;;
    "")
    	case $REQUEST_METHOD in
	    POST)	dispatch exec.cgi ;;
	    *)		redirect_freetz /status ;;
	esac
	;;
    /status)		dispatch status.cgi /status ;;
    /status/?*)
    	cgi=${PATH_INFO#/status/}
	if [ "$cgi" = "daemons" ]; then
	    case $REQUEST_METHOD in
		POST)	dispatch exec.cgi ;;
		*)	dispatch daemons.cgi /status/daemons ;;
	    esac
	else
	    		prepend_query "cgi=$cgi"
	    		dispatch pkgstatus.cgi /status
	fi
	;;

    /package)		dispatch packages.cgi /package ;;
    /package/?*/?*)	dispatch extras.cgi /package ;;
# FIXME: integrate into /packages?
    /extras)		dispatch extras.cgi /extras ;;
    /package/?*)
	pkg=${PATH_INFO#/package/}
    	case $REQUEST_METHOD in
	    POST)
# form=def_$pkg might override this settings because it comes last; FIXME
	    		prepend_query "form=pkg_$pkg"
			dispatch save.cgi
	    		;;
	    *)
			prepend_query "pkg=$pkg"
			dispatch pkgconf.cgi /package
			;;
	esac
	;;

    /conf)
    	case $REQUEST_METHOD in
	    POST)
	    		prepend_query "form=pkg_mod"
			dispatch save.cgi
			;;
	    *)
			prepend_query "pkg=mod"
	    		dispatch pkgconf.cgi /conf
			;;
	esac
	;;
    /conf/password)
    	case $REQUEST_METHOD in
	    POST)	dispatch passwd_save.cgi ;;
	    *)		dispatch passwd.cgi /conf/password ;;
	esac
	;;
    /file/?*)
	id=${PATH_INFO##/file/*/}
	pkg=${PATH_INFO#/file/}; pkg=${pkg%/*}
	prepend_query "pkg=$pkg&id=$id"
	case $REQUEST_METHOD in
	    POST)	dispatch file_save.cgi ;;
	    *)		dispatch file.cgi "$PATH_INFO" ;;
	esac
	;;

    /shell)		dispatch rudi_shell.cgi ;;
# /shell/exec is not only target of POST requests; that's why we cannot simply
# POST to /shell
    /shell/exec)	dispatch rudi_shellcmd.cgi ;;
    /shell/upload)	dispatch rudi_upload.cgi ;;
    /backup)
    	case $REQUEST_METHOD in
	    POST)	dispatch do_restore.cgi ;;
	    *)		dispatch backup_restore.cgi ;;
	esac
	;;
    /backup/download)	dispatch do_backup.cgi ;;
    /about)		dispatch about.cgi ;;
    /update)
    	case $REQUEST_METHOD in
	    POST)	dispatch do_update.cgi ;;
	    *)		dispatch firmware_update.cgi ;;
	esac
	;;
    /update/external)
    	case $REQUEST_METHOD in
	    POST)	dispatch do_external.cgi ;;
	    *)		dispatch external_update.cgi ;;
	esac
    	;;
    /system)		dispatch system.cgi ;;

    *)			error_not_found ;;
esac
