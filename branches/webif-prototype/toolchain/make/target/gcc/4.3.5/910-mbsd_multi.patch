--- gcc/c-opts.c.orig	2008-01-22 14:11:44.000000000 +0000
+++ gcc/c-opts.c	2010-06-02 16:31:02.368360192 +0000
@@ -108,6 +108,9 @@
 /* Number of deferred options scanned for -include.  */
 static size_t include_cursor;
 
+/* Check if a port honours COPTS.  */
+static int honour_copts = 0;
+
 static void set_Wimplicit (int);
 static void handle_OPT_d (const char *);
 static void set_std_cxx98 (int);
@@ -462,6 +465,14 @@
       enable_warning_as_error ("implicit-function-declaration", value, CL_C | CL_ObjC); 
       break;
 
+    case OPT_Werror_maybe_reset:
+      {
+	char *ev = getenv ("GCC_NO_WERROR");
+	if ((ev != NULL) && (*ev != '0'))
+	  cpp_opts->warnings_are_errors = 0;
+      }
+      break;
+
     case OPT_Wformat:
       set_Wformat (value);
       break;
@@ -708,6 +719,12 @@
       flag_exceptions = value;
       break;
 
+    case OPT_fhonour_copts:
+      if (c_language == clk_c) {
+	honour_copts++;
+      }
+      break;
+
     case OPT_fimplement_inlines:
       flag_implement_inlines = value;
       break;
@@ -1248,6 +1265,47 @@
   /* Has to wait until now so that cpplib has its hash table.  */
   init_pragma ();
 
+  if (c_language == clk_c) {
+    char *ev = getenv ("GCC_HONOUR_COPTS");
+    int evv;
+    if (ev == NULL)
+      evv = -1;
+    else if ((*ev == '0') || (*ev == '\0'))
+      evv = 0;
+    else if (*ev == '1')
+      evv = 1;
+    else if (*ev == '2')
+      evv = 2;
+    else if (*ev == 's')
+      evv = -1;
+    else {
+      warning (0, "unknown GCC_HONOUR_COPTS value, assuming 1");
+      evv = 1; /* maybe depend this on something like MIRBSD_NATIVE?  */
+    }
+    if (evv == 1) {
+      if (honour_copts == 0) {
+	error ("someone does not honour COPTS at all in lenient mode");
+	return false;
+      } else if (honour_copts != 1) {
+	warning (0, "someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+      }
+    } else if (evv == 2) {
+      if (honour_copts == 0) {
+	error ("someone does not honour COPTS at all in strict mode");
+	return false;
+      } else if (honour_copts != 1) {
+	error ("someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+	return false;
+      }
+    } else if (evv == 0) {
+      if (honour_copts != 1)
+	inform ("someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+    }
+  }
+
   return true;
 }
 
--- gcc/c.opt.orig	2008-01-13 00:22:38.000000000 +0000
+++ gcc/c.opt	2010-06-02 16:31:02.368360192 +0000
@@ -207,6 +207,10 @@
 C ObjC RejectNegative Warning
 This switch is deprecated; use -Werror=implicit-function-declaration instead
 
+Werror-maybe-reset
+C ObjC C++ ObjC++
+; Documented in common.opt
+
 Wfloat-equal
 C ObjC C++ ObjC++ Var(warn_float_equal) Warning
 Warn if testing floating point numbers for equality
@@ -590,6 +594,9 @@
 fhonor-std
 C++ ObjC++
 
+fhonour-copts
+C ObjC C++ ObjC++ RejectNegative
+
 fhosted
 C ObjC
 Assume normal C execution environment
--- gcc/common.opt.orig	2008-01-22 14:11:44.000000000 +0000
+++ gcc/common.opt	2010-06-02 16:31:02.368360192 +0000
@@ -102,6 +102,10 @@
 Common Joined
 Treat specified warning as error
 
+Werror-maybe-reset
+Common
+If environment variable GCC_NO_WERROR is set, act as -Wno-error
+
 Wextra
 Common Warning
 Print extra (possibly unwanted) warnings
@@ -528,6 +532,9 @@
 Common Report Var(flag_guess_branch_prob) Optimization
 Enable guessing of branch probabilities
 
+fhonour-copts
+Common RejectNegative
+
 ; Nonzero means ignore `#ident' directives.  0 means handle them.
 ; Generate position-independent code for executables if possible
 ; On SVR4 targets, it also controls whether or not to emit a
--- gcc/opts.c.orig	2008-06-11 09:16:09.000000000 +0000
+++ gcc/opts.c	2010-06-02 16:31:02.378367051 +0000
@@ -830,9 +830,6 @@
       flag_schedule_insns_after_reload = 1;
 #endif
       flag_regmove = 1;
-      flag_strict_aliasing = 1;
-      flag_strict_overflow = 1;
-      flag_delete_null_pointer_checks = 1;
       flag_reorder_blocks = 1;
       flag_reorder_functions = 1;
       flag_tree_store_ccp = 1;
@@ -853,6 +850,10 @@
 
   if (optimize >= 3)
     {
+      flag_strict_aliasing = 1;
+      flag_strict_overflow = 1;
+      flag_delete_null_pointer_checks = 1;
+
       flag_predictive_commoning = 1;
       flag_inline_functions = 1;
       flag_unswitch_loops = 1;
@@ -1444,6 +1445,17 @@
       enable_warning_as_error (arg, value, lang_mask);
       break;
 
+    case OPT_Werror_maybe_reset:
+      {
+	char *ev = getenv ("GCC_NO_WERROR");
+	if ((ev != NULL) && (*ev != '0'))
+	  warnings_are_errors = 0;
+      }
+      break;
+
+    case OPT_fhonour_copts:
+      break;
+
     case OPT_Wextra:
       set_Wextra (value);
       break;
--- gcc/doc/cppopts.texi.orig	2007-07-30 18:29:20.000000000 +0000
+++ gcc/doc/cppopts.texi	2010-06-02 16:31:02.378367051 +0000
@@ -168,6 +168,11 @@
 Make all warnings into hard errors.  Source code which triggers warnings
 will be rejected.
 
+ at item -Werror-maybe-reset
+ at opindex Werror-maybe-reset
+Act like @samp{-Wno-error} if the @env{GCC_NO_WERROR} environment
+variable is set to anything other than 0 or empty.
+
 @item -Wsystem-headers
 @opindex Wsystem-headers
 Issue warnings for code in system headers.  These are normally unhelpful
--- gcc/doc/invoke.texi.orig	2009-01-27 18:45:49.000000000 +0000
+++ gcc/doc/invoke.texi	2010-06-02 16:31:02.388360570 +0000
@@ -233,7 +233,7 @@
 -Wconversion  -Wcoverage-mismatch  -Wno-deprecated-declarations @gol
 -Wdisabled-optimization  -Wno-div-by-zero  @gol
 -Wempty-body  -Wno-endif-labels @gol
--Werror  -Werror=* @gol
+-Werror  -Werror=* -Werror-maybe-reset @gol
 -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol
 -Wno-format-extra-args -Wformat-nonliteral @gol
 -Wformat-security  -Wformat-y2k -Wignored-qualifiers @gol
@@ -4031,6 +4031,22 @@
 @option{-Wall} and by @option{-pedantic}, which can be disabled with
 @option{-Wno-pointer-sign}.
 
+ at item -Werror-maybe-reset
+ at opindex Werror-maybe-reset
+Act like @samp{-Wno-error} if the @env{GCC_NO_WERROR} environment
+variable is set to anything other than 0 or empty.
+
+ at item -fhonour-copts
+ at opindex fhonour-copts
+If @env{GCC_HONOUR_COPTS} is set to 1, abort if this option is not
+given at least once, and warn if it is given more than once.
+If @env{GCC_HONOUR_COPTS} is set to 2, abort if this option is not
+given exactly once.
+If @env{GCC_HONOUR_COPTS} is set to 0 or unset, warn if this option
+is not given exactly once.
+The warning is quelled if @env{GCC_HONOUR_COPTS} is set to @samp{s}.
+This flag and environment variable only affect the C language.
+
 @item -Wstack-protector
 @opindex Wstack-protector
 @opindex Wno-stack-protector
@@ -5493,7 +5509,7 @@
 second branch or a point immediately following it, depending on whether
 the condition is known to be true or false.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -fsplit-wide-types
 @opindex fsplit-wide-types
@@ -5638,7 +5654,7 @@
 @option{-fno-delete-null-pointer-checks} to disable this optimization
 for programs which depend on that behavior.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -fexpensive-optimizations
 @opindex fexpensive-optimizations
--- gcc/java/jvspec.c.orig	2007-07-31 16:19:49.000000000 +0000
+++ gcc/java/jvspec.c	2010-06-02 16:31:02.408364858 +0000
@@ -670,6 +670,7 @@
      class name.  Append dummy `.c' that can be stripped by set_input so %b
      is correct.  */ 
   set_input (concat (main_class_name, "main.c", NULL));
+  putenv ("GCC_HONOUR_COPTS=s"); /* XXX hack!  */
   err = do_spec (jvgenmain_spec);
   if (err == 0)
     {
