diff -Naur linux-2.4.17_mvl21.orig/net/ipv4/netfilter/ipt_CONNMARK.c linux-2.4.17_mvl21/net/ipv4/netfilter/ipt_CONNMARK.c
--- linux-2.4.17_mvl21.orig/net/ipv4/netfilter/ipt_CONNMARK.c	2006-07-07 14:25:26.000000000 +0200
+++ linux-2.4.17_mvl21/net/ipv4/netfilter/ipt_CONNMARK.c	2006-07-07 14:22:51.000000000 +0200
@@ -31,6 +31,35 @@
 #include <linux/netfilter_ipv4/ipt_CONNMARK.h>
 #include <linux/netfilter_ipv4/ip_conntrack.h>
 
+static int setTOS(uint8_t tos, struct sk_buff **pskb)
+{
+	struct iphdr *iph = (*pskb)->nh.iph;
+	if ((iph->tos & IPTOS_TOS_MASK) != tos) {
+		uint16_t diffs[2];
+
+		/* raw socket (tcpdump) may have clone of incoming
+		   skb: don't disturb it --RR */
+		if (skb_cloned(*pskb) && !(*pskb)->sk) {
+			struct sk_buff *nskb = skb_copy(*pskb, GFP_ATOMIC);
+			if (!nskb) {
+				printk(KERN_WARNING "skb_copy in ipt_CONNMARK for setting TOS bit failed\n");
+				return -1;
+			}
+			kfree_skb(*pskb);
+			*pskb = nskb;
+			iph = (*pskb)->nh.iph;
+		}
+
+		diffs[0] = htons(iph->tos) ^ 0xFFFF;
+		iph->tos = (iph->tos & IPTOS_PREC_MASK) | tos;
+		diffs[1] = htons(iph->tos);
+		iph->check = csum_fold(csum_partial((char*)diffs,
+											sizeof(diffs),
+											iph->check^0xFFFF));
+	}
+	return 0;
+}
+
 static unsigned int
 target(struct sk_buff **pskb,
        unsigned int hooknum,
@@ -50,19 +79,31 @@
 	    switch(markinfo->mode) {
 	    case IPT_CONNMARK_SET:
 		newmark = (ct->mark & ~markinfo->mask) | markinfo->mark;
-		if (newmark != ct->mark)
+		if (newmark != ct->mark) {
 			ct->mark = newmark;
+			if (ct->mark & 0x8000) { // extension for setting tos bit
+				if (!setTOS(ct->mark & 0xFF, pskb))
+					(*pskb)->nfcache |= NFC_ALTERED;
+			}
+		}
 		break;
 	    case IPT_CONNMARK_SAVE:
 		newmark = (ct->mark & ~markinfo->mask) | ((*pskb)->nfmark & markinfo->mask);
-		if (ct->mark != newmark)
+		if (ct->mark != newmark) {
 			ct->mark = newmark;
+			if (ct->mark & 0x8000) { // extension for setting tos bit
+				if (!setTOS(ct->mark & 0xFF, pskb))
+					(*pskb)->nfcache |= NFC_ALTERED;
+			}
+		}
 		break;
 	    case IPT_CONNMARK_RESTORE:
 		nfmark = (*pskb)->nfmark;
 		diff = (ct->mark ^ nfmark) & markinfo->mask;
 		if (diff != 0) {
 			(*pskb)->nfmark = nfmark ^ diff;
+			if (ct->mark & 0x8000) // extension for setting tos bit
+				setTOS(ct->mark & 0xFF, pskb);
 			(*pskb)->nfcache |= NFC_ALTERED;
 		}
 		break;
